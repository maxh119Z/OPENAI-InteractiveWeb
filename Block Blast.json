[{"title":"Block Blast","html":"<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>","css":"#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}","javascript":"document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  assignPlayerColor();\n}\n\nfunction assignPlayerColor() {\n  playerColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();","multiplayer":"function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"},{"title":"Block Blast","html":"<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>","css":"#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  padding: 10px;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}","javascript":"document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  assignPlayerColor();\n}\n\nfunction assignPlayerColor() {\n  playerColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();","multiplayer":"function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"},{"title":"Block Blast","html":"<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>","css":"#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  min-height:600px;height: auto\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  padding: 10px;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: grey; /* Neutral color for unplaced pieces */\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}","javascript":"document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  assignPlayerColor();\n}\n\nfunction assignPlayerColor() {\n  playerColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'grey'; // Set a neutral color for unplaced pieces\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'grey'; // Neutral color for unplaced pieces\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();","multiplayer":"function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"},{"title":"Block Blast","html":"<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>","css":"#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  min-height: 600px;\n  height: auto;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  padding: 10px;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: grey;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}","javascript":"document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  assignPlayerColor();\n}\n\nfunction assignPlayerColor() {\n  playerColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'grey';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'grey';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();","multiplayer":"function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"},{"title":"Block Blast","html":"<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>","css":"#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  min-height: 600px;\n  height: auto;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  padding: 10px;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: grey;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}","javascript":"document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  assignPlayerColor();\n}\n\nfunction assignPlayerColor() {\n  playerColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    renderPiece(piece, pieceContainer);\n  }\n}\n\nfunction renderPiece(piece, container) {\n  container.innerHTML = '';\n  for (var row = 0; row < piece.length; row++) {\n    for (var col = 0; col < piece[row].length; col++) {\n      var block = document.createElement('div');\n      if (piece[row][col] === 1) {\n        block.style.backgroundColor = 'grey';\n      }\n      container.appendChild(block);\n    }\n  }\n  container.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n  container.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    renderPiece(piece, pieceContainer);\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();","multiplayer":"function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"},{"title":"Block Blast","html":"<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>","css":"#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  min-height: 600px;\n  height: auto;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  padding: 10px;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: grey;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}","javascript":"document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  assignPlayerColor();\n}\n\nfunction assignPlayerColor() {\n  playerColor = playerColors[Math.floor(Math.random() * playerColors.length)];\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    renderPiece(piece, pieceContainer);\n  }\n}\n\nfunction renderPiece(piece, container) {\n  container.innerHTML = '';\n  for (var row = 0; row < piece.length; row++) {\n    for (var col = 0; col < piece[row].length; col++) {\n      var block = document.createElement('div');\n      if (piece[row][col] === 1) {\n        block.style.backgroundColor = 'grey';\n      }\n      container.appendChild(block);\n    }\n  }\n  container.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n  container.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    renderPiece(piece, pieceContainer);\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();","multiplayer":"function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"}]