[{"title":"Minesweeper","html":"<div id=\"game-container\">\n    <div id=\"grid\"></div>\n    <button id=\"restart-button\">Restart Game</button>\n</div>",
  "css":"#game-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    min-width: 600px;\n    margin: 0 auto;\n}\n\n#grid {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    gap: 2px;\n    margin-top: 20px;\n}\n\n#grid div {\n    width: 30px;\n    height: 30px;\n    background-color: #ff6666;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid #800080;\n    cursor: pointer;\n    user-select: none;\n}\n\n#grid div.revealed {\n    background-color: #ffccff;\n    cursor: default;\n}\n\n#restart-button {\n    margin-top: 20px;\n    padding: 10px 20px;\n    background-color: #800080;\n    color: #ffffff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#restart-button:hover {\n    background-color: #ff66ff;\n}","javascript":"function initializeGame() {\n    const gridElement = document.getElementById('grid');\n    gridElement.innerHTML = '';\n    const gridSize = 10;\n    const bombCount = 20;\n    const gridArray = createGrid(gridSize, bombCount);\n\n    gridArray.forEach((row, rowIndex) => {\n        row.forEach((cell, colIndex) => {\n            const cellElement = document.createElement('div');\n            cellElement.addEventListener('click', () => handleCellClick(rowIndex, colIndex, gridArray));\n            gridElement.appendChild(cellElement);\n        });\n    });\n}\n\nfunction createGrid(size, bombs) {\n    const grid = Array(size).fill(null).map(() => Array(size).fill({ bomb: false, revealed: false }));\n    let bombsPlaced = 0;\n\n    while (bombsPlaced < bombs) {\n        const row = Math.floor(Math.random() * size);\n        const col = Math.floor(Math.random() * size);\n        if (!grid[row][col].bomb) {\n            grid[row][col].bomb = true;\n            bombsPlaced++;\n        }\n    }\n\n    return grid;\n}\n\nfunction handleCellClick(row, col, grid) {\n    const cell = grid[row][col];\n    if (cell.revealed) return;\n    cell.revealed = true;\n\n    const cellElement = document.getElementById('grid').children[row * grid.length + col];\n    cellElement.classList.add('revealed');\n    if (cell.bomb) {\n        cellElement.textContent = 'ðŸ’£';\n        alert('Game Over!');\n        return;\n    }\n\n    const bombCount = countAdjacentBombs(row, col, grid);\n    if (bombCount > 0) {\n        cellElement.textContent = bombCount;\n    } else {\n        revealAdjacentCells(row, col, grid);\n    }\n}\n\nfunction countAdjacentBombs(row, col, grid) {\n    const directions = [-1, 0, 1];\n    let bombCount = 0;\n\n    directions.forEach(dRow => {\n        directions.forEach(dCol => {\n            if (dRow === 0 && dCol === 0) return;\n            const newRow = row + dRow;\n            const newCol = col + dCol;\n            if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid.length) {\n                if (grid[newRow][newCol].bomb) bombCount++;\n            }\n        });\n    });\n\n    return bombCount;\n}\n\nfunction revealAdjacentCells(row, col, grid) {\n    const directions = [-1, 0, 1];\n\n    directions.forEach(dRow => {\n        directions.forEach(dCol => {\n            if (dRow === 0 && dCol === 0) return;\n            const newRow = row + dRow;\n            const newCol = col + dCol;\n            if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid.length) {\n                handleCellClick(newRow, newCol, grid);\n            }\n        });\n    });\n}\n\nfunction restartGame() {\n    initializeGame();\n}","multiplayer":"function receiveData(message) {\n    if (message.type === 'update') {\n        updateGameState(message.data);\n    }\n}\n\nfunction updateGameState(data) {\n    const gridElement = document.getElementById('grid');\n    data.forEach((row, rowIndex) => {\n        row.forEach((cell, colIndex) => {\n            const cellElement = gridElement.children[rowIndex * data.length + colIndex];\n            if (cell.revealed) {\n                cellElement.classList.add('revealed');\n                cellElement.textContent = cell.bomb ? 'ðŸ’£' : cell.adjacentBombs > 0 ? cell.adjacentBombs : '';\n            }\n        });\n    });\n}\n\n$.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify({ type: 'request-update' }),\n    contentType: \"application/json\",\n    success: response => console.log(\"Update request sent successfully:\", response),\n    error: error => console.error(\"Error sending update request:\", error)\n});\n\nreceiveData(message);"}]