[
  {
    "title": "",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  // Add game logic here\n}"
  },
  {
    "title": "Connect 4",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p>Game Updates</p>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n}\n\n#pauseButton {\n  position: absolute;\n  top: 70px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  gamePaused = !gamePaused;\n  document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n}\n\nfunction showUpdates() {\n  const modal = document.getElementById(\"myModal\");\n  const span = document.getElementsByClassName(\"close\")[0];\n\n  // When the user clicks on the button, open the modal\n  modal.style.display = \"block\";\n\n  // When the user clicks on <span> (x), close the modal\n  span.onclick = function() {\n    modal.style.display = \"none\";\n  }\n\n  // When the user clicks anywhere outside of the modal, close it\n  window.onclick = function(event) {\n    if (event.target == modal) {\n      modal.style.display = \"none\";\n    }\n  }\n}"
  },
  {
    "title": "Connect 4",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\"></p>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n}\n\n#pauseButton {\n  position: absolute;\n  top: 70px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.modal {\n  display: none; \n  position: fixed;\n  z-index: 1; \n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.4);\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  gamePaused = !gamePaused;\n  document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  // Add pause/resume game logic here\n}\n\nfunction showUpdates() {\n  const modal = document.getElementById(\"myModal\");\n  const span = document.getElementsByClassName(\"close\")[0];\n  const updateContent = document.getElementById(\"updateContent\");\n\n  gamePaused = true; // pause the game when updates are shown\n  document.getElementById('pauseButton').innerText = \"Resume Game\";\n\n  // Fetch updates and display in the modal\n  // Add fetch update logic here\n  updateContent.innerText = \"Example updates here\";\n\n  modal.style.display = \"block\";\n\n  span.onclick = function() {\n    modal.style.display = \"none\";\n    gamePaused = false; // resume the game when updates are closed\n    document.getElementById('pauseButton').innerText = \"Pause Game\";\n  }\n\n  window.onclick = function(event) {\n    if (event.target == modal) {\n      modal.style.display = \"none\";\n      gamePaused = false; // resume the game when modal is closed\n      document.getElementById('pauseButton').innerText = \"Pause Game\";\n    }\n  }\n}"
  },
  {
    "title": "Connect 4",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\">\n    <div class=\"row\" id=\"row0\"></div>\n    <div class=\"row\" id=\"row1\"></div>\n    <div class=\"row\" id=\"row2\"></div>\n    <div class=\"row\" id=\"row3\"></div>\n    <div class=\"row\" id=\"row4\"></div>\n    <div class=\"row\" id=\"row5\"></div>\n  </div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\"></p>\n  </div>\n</div>",
    "css": "#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: flex;\n  flex-direction: column;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 30px;\n  height: 30px;\n  margin: 5px;\n  background-color: lightgrey;\n  border-radius: 50%;\n}\n\n.red {\n  background-color: red;\n}\n\n.yellow {\n  background-color: yellow;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\n\n// Populate an empty board at start\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\n// Click event for every cell\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.addEventListener('click', () => placeDisc(colNum));        \n    document.getElementById(\"row\" + rowNum).appendChild(cell);\n  }\n}\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  // Reset board view\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.className = \"cell\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.getElementById(\"row\" + row).children[colNum].classList.add(currentPlayer);\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  // ... same as before ...\n}"
  },
  {
    "title": "Connect 4",
    "html": "<body>\n<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\">\n    <!-- Game grid is generated by JavaScript -->\n  </div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\">Updates will appear here!</p>\n  </div>\n</div>\n</body>",
    "css": "#gameArea {\n  width: 100%;\n  height: 60vh;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  margin: 5px;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.red {\n  background-color: red;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.modal {\n  display: none; \n  position: fixed; \n  z-index: 1; \n  padding-top: 100px; \n  width: 100%; \n  height: 100%; \n  overflow: auto; \n  background-color: rgba(0,0,0,0.4); \n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\nconst modal = document.getElementById('myModal');\nconst closeButton = document.getElementsByClassName('close')[0];\ncloseButton.onclick = function() {\n  modal.style.display = \"none\";\n  gamePaused = false;\n}\n\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  let rowDiv = document.createElement(\"div\");\n  rowDiv.classList.add(\"row\");\n\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.addEventListener('click', () => placeDisc(colNum));        \n    rowDiv.appendChild(cell);\n  }\n\n  document.getElementById(\"gameArea\").appendChild(rowDiv);\n}\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.style.backgroundColor = \"white\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.querySelectorAll(\".row\")[row].children[colNum].style.backgroundColor = currentPlayer;\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  modal.style.display = \"block\";\n  gamePaused = true;\n}"
  },
  {
    "title": "Connect 4",
    "html": "<body>\n<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\">Updates will appear here!</p>\n  </div>\n</div>\n</body>",
    "css": "#gameArea {\n  width: 100%;\n  height: 60vh;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  margin: 5px;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.red {\n  background-color: red;\n}\n\n.yellow {\n  background-color: yellow;\n}\n\n.modal {\n  display: none; \n  position: fixed; \n  z-index: 1; \n  padding-top: 100px; \n  width: 100%; \n  height: 100%; \n  overflow: auto; \n  background-color: rgba(0,0,0,0.4); \n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n\n.close {\n  color: #aaaaaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\nconst modal = document.getElementById('myModal');\nconst closeButton = document.getElementsByClassName('close')[0];\ncloseButton.onclick = function() {\n  modal.style.display = \"none\";\n  gamePaused = false;\n}\n\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  let rowDiv = document.createElement(\"div\");\n  rowDiv.classList.add(\"row\");\n\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.addEventListener('click', () => placeDisc(colNum));        \n    rowDiv.appendChild(cell);\n  }\n\n  document.getElementById(\"gameArea\").appendChild(rowDiv);\n}\n\nfunction startGame() {\n  score = 0;\n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.style.backgroundColor = \"white\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.querySelectorAll(\".row\")[row].children[colNum].style.backgroundColor = currentPlayer;\n\n      if (checkWin(currentPlayer)) {\n        gamePaused=true;\n        gameOver=true;\n        document.getElementById('pauseButton').innerText = \"Game Over\";\n        alert(`${currentPlayer} Won!`);\n      }\n\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  modal.style.display = \"block\";\n  gamePaused = true;\n}\n\nfunction checkWin(player) {\n  // Check horizontal places\n  for (let row = 0; row < board.length; row++)\n    for (let col = 0; col < board[0].length - 3; col++)\n      if (board[row][col] == player && board[row][col + 1] == player && board[row][col + 2] == player && board[row][col + 3] == player)\n        return true;\n\n  // Check vertical places\n  for (let row = 0; row < board.length - 3; row++)\n    for (let col = 0; col < board[0].length; col++)\n      if (board[row][col] == player && board[row + 1][col] == player && board[row + 2][col] == player && board[row + 3][col] == player)\n        return true;\n\n  // Check main diag\n  for (let row = 3; row < board.length; row++) \n    for (let col = 0; col < board[0].length - 3; col++)\n      if (board[row][col] == player && board[row - 1][col + 1] == player && board[row - 2][col + 2] == player && board[row - 3][col + 3] == player)\n        return true;\n\n  // Check counter diag\n  for (let row = 3; row < board.length; row++)\n    for (let col = 3; col < board[0].length; col++)\n      if (board[row][col] == player && board[row - 1][col - 1] == player && board[row - 2][col - 2] == player && board[row - 3][col - 3] == player)\n        return true;\n\n  return false;\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" style=\"display:none;\">Pause</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 200px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"inline\";\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  gamePaused = true;\n  document.getElementById('startButton').style.display = \"inline\";\n  document.getElementById('pauseButton').style.display = \"none\";\n\n  if(gamePaused) {\n    // Pause game logic\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"none\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"menu\">\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"updateButton\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 2;\n}\n\n#menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#startButton, #pauseButton {\n  display : none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 200px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 1;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"inline\";\n  document.getElementById('updateButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n\n  // Add game logic here\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    // Pause game logic\n    gamePaused = true;\n    document.getElementById('pauseButton').innerText = \"Resume\";\n  } else {\n    // Resume game logic\n    gamePaused = false;\n    document.getElementById('pauseButton').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startButton').style.display = \"inline\";\n  document.getElementById('pauseButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}"
  },
  {
    "title": "Connect 4",
    "html": "<body>\n<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"pauseButton\" disabled>Pause Game</button>\n  <button id=\"updateButton\">Show Updates</button>\n  <div id=\"gameArea\"></div>\n</div>\n\n<div id=\"myModal\" class=\"modal\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p id=\"updateContent\">Updates will appear here!</p>\n  </div>\n</div>\n</body>",
    "css": "#gameArea {\n  width: 100%;\n  height: 60vh;\n  background-color: lightblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  margin: 5px;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  padding-top: 100px;\n  left: 0;\n  top: 0;\n  width: 100%; \n  height: 100%;\n  overflow: auto;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n}\n\n.modal-content {\n  margin: auto;\n  display: block;\n  width: 80%;\n  max-width: 700px;\n}",
    "javascript": "let score = 0;\nlet gamePaused = false;\nlet currentPlayer = \"red\";\nlet gameOver = true;\nlet board = [];\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\nconst modal = document.getElementById('myModal');\nconst closeButton = document.getElementsByClassName('close')[0];\n\nfor(let i = 0; i < 6; i++){\n  let row = Array(7).fill(null);\n  board.push(row);\n}\n\nfor(let rowNum = 0; rowNum < 6; rowNum++){\n  let rowDiv = document.createElement(\"div\");\n  rowDiv.classList.add(\"row\");\n\n  for(let colNum = 0; colNum < 7; colNum++){\n    let cell = document.createElement(\"div\");\n    cell.classList.add(\"cell\");\n    cell.onclick = function() { \n        placeDisc(colNum); \n    };\n    rowDiv.appendChild(cell);\n  }\n\n  document.getElementById(\"gameArea\").appendChild(rowDiv);\n}\n\ncloseButton.onclick = function() {\n  modal.style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction startGame() {\n  score = 0; \n  gamePaused = false;\n  gameOver = false;\n  currentPlayer = \"red\";\n  document.getElementById('score').innerText = score;\n  document.getElementById('pauseButton').disabled = false;\n  document.getElementById('pauseButton').innerText = \"Pause Game\";\n\n  let cells = document.querySelectorAll(\".cell\");\n  cells.forEach(cell => cell.style.backgroundColor = \"white\");\n}\n\nfunction pauseGame() {\n  if(!gameOver){\n    gamePaused = !gamePaused;\n    document.getElementById('pauseButton').innerText = gamePaused ? \"Resume Game\" : \"Pause Game\";\n  }\n}\n\nfunction placeDisc(colNum) {\n  if(!gamePaused && !gameOver) {\n    let row;\n    for (row = 5; row >= 0 && board[row][colNum] !== null; row--) {}\n    if (row >= 0) {\n      board[row][colNum] = currentPlayer;\n      document.querySelectorAll(\".row\")[row].children[colNum].style.backgroundColor = currentPlayer;\n\n      if (checkWin(currentPlayer)) {\n        score++;\n        document.getElementById('score').innerText = score;\n        gamePaused=true;\n        gameOver=true;\n        document.getElementById('pauseButton').innerText = \"Game Over\";\n        alert(`${currentPlayer} Won!`);\n      }\n\n      currentPlayer = currentPlayer === \"red\" ? \"yellow\" : \"red\";\n    }\n  }\n}\n\nfunction showUpdates() {\n  modal.style.display = \"block\";\n  gamePaused = true;\n}\n\nfunction checkWin(player) {\n  //Check horizontal places\n  //Check vertical places\n  //Check main diag\n  //Check counter diag\n\n  return false;\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"gameArea\"></div>\n    <div id=\"updateMenu\">\n        <h2>Updates:</h2>\n        <p id=\"updateText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#updateMenu {\n  display: none;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 200px;\n}\n\n#resumeButton {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', closeUpdateMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  // Add game logic here\n  gameInterval = setInterval(runGame, 1000); // Assuming the game runs on a 1 second loop\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Game paused.\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction runGame() {\n  // game code goes here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"gameArea\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n    <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-bottom: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"gameArea\">\n        <div id=\"minefield\"></div>\n    </div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n    <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-bottom: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#gameArea, #minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  generateMinefield(10, 10); // 10x10 grid\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.style.width = '10px';\n      square.style.height = '10px';\n      square.style.border = '1px solid black';\n      square.style.float = 'left';\n      if(Math.random() > 0.8){// 20% chance of a mine\n        square.classList.add('mine');\n      } else {\n        square.classList.add('clear');\n      }\n      minefield.appendChild(square);\n    }\n    var br = document.createElement('br');\n    minefield.appendChild(br);\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-bottom: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height); \n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.style.width = '10px';\n      square.style.height = '10px';\n      square.style.border = '1px solid black';\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = e.target.dataset.i;\n  var j = e.target.dataset.j;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          e.target.textContent ++;\n        }\n      }catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#minefield div {\n  width: 10%;\n  height: 10%;\n  border: 1px solid black;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height);\n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = e.target.dataset.i;\n  var j = e.target.dataset.j;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          e.target.textContent ++;\n        }\n      }catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 1010px;\n  height: 1010px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between; \n}\n\n#minefield div {\n  width: 10%;\n  height: 10%;\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n\n.mine {\n  background-color: red;\n}\n\n.clear {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height);\n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = e.target.dataset.i;\n  var j = e.target.dataset.j;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          e.target.textContent ++;\n        }\n      }catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n<div id=\"gameWindow\">\n    <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause Game</button>\n    <div id=\"minefield\"></div>\n    <div id=\"upgradeMenu\" class=\"panel\">\n        <button id=\"closeUpgradeMenu\">Close</button>\n        <h2>Upgrades:</h2>\n        <p id=\"upgradeText\"></p>\n        <button id=\"resumeButton\">Resume Game</button>\n    </div>\n</div>\n</body>",
    "css": "#gameWindow {\n  width: 1010px;\n  height: 1010px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n}\n\n#startButton, #pauseButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#pauseButton {\n  top: 90px;\n}\n\n#minefield {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between; \n}\n\n#minefield div {\n  width: 10%;\n  height: 10%;\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n\n.mine.revealed{\n  background-color: red;\n}\n\n.clear.revealed {\n  background-color: white;\n}\n\n.panel {\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  padding: 20px;\n  border: 2px solid black;\n  background-color: white;\n  width: 240px;\n  display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n  display: block;\n  margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\n\nfunction createBoard(width, height) {\n  for(var i = 0; i < width; i++){\n    board[i] = [];\n    for(var j = 0; j < height; j++){\n      board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n    }\n  }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  createBoard(width, height);\n  generateMinefield(width, height);\n  gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n  clearInterval(gameInterval);\n  gameInterval = null;\n  document.getElementById('upgradeMenu').style.display = \"block\";\n  document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  if(gameInterval === null) {\n    gameInterval = setInterval(runGame, 1000);\n  }\n}\n\nfunction closeUpgradeMenu() {\n  document.getElementById('upgradeMenu').style.display = \"none\";\n  document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n  for(var i = 0; i < width; i++){\n    for(var j = 0; j < height; j++){\n      var square = document.createElement('div');\n      square.classList.add(board[i][j]);\n      square.dataset.i = i;\n      square.dataset.j = j;\n      square.addEventListener('click', squareClicked);\n      minefield.appendChild(square);\n    }\n  }\n}\n\nfunction squareClicked(e) {\n  var i = parseInt(e.target.dataset.i);\n  var j = parseInt(e.target.dataset.j);\n  e.target.classList.add('revealed');\n  var mines = 0;\n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] === 'mine') {\n          mines++;\n        }\n      }catch(e){}\n    }\n  }\n  e.target.textContent = mines > 0 ? mines : '';\n  if(mines === 0) {\n    revealClearArea(i,j);\n  }\n}\n\nfunction revealClearArea(i,j) { \n  for (var x=-1; x<=1; x++) {\n    for (var y=-1; y<=1; y++) {\n      try {\n        if(board[i-x][j-y] !== 'mine') {\n          minefield.children[(i-x)*width+(j-y)].classList.add('revealed');\n        }\n      } catch(e){}\n    }\n  }\n}\n\nfunction runGame() {\n  // Add game logic here\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n    <div id=\"gameWindow\">\n        <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n        <button id=\"startButton\">Start Game</button>\n        <button id=\"pauseButton\">Pause Game</button>\n        <div id=\"minefield\"></div>\n        <div id=\"upgradeMenu\" class=\"panel\">\n             <button id=\"closeUpgradeMenu\">Close</button>\n             <h2>Upgrades:</h2>\n             <p id=\"upgradeText\"></p>\n             <button id=\"resumeButton\">Resume Game</button>\n        </div>\n    </div>\n</body>",
    "css": "#gameWindow {\n    width: 1010px;\n    height: 1010px;\n    border: 2px solid black;\n    position: relative;\n    margin: auto;\n}\n\n#scoreBoard {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 20px;\n}\n\n#startButton, #pauseButton {\n    position: absolute;\n    top: 50px;\n    left: 10px;\n}\n\n#pauseButton {\n    top: 90px;\n}\n\n#minefield {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between; \n}\n\n#minefield div {\n    width: 10%;\n    height: 10%;\n    box-sizing: border-box;\n    border: 1px solid black;\n}\n\n.mine.revealed{\n    background-color: red;\n}\n\n.clear.revealed {\n    background-color: white;\n}\n\n.panel {\n    position: absolute;\n    top: 40px;\n    right: 20px;\n    padding: 20px;\n    border: 2px solid black;\n    background-color: white;\n    width: 240px;\n    display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n    display: block;\n    margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 10;\nvar height = 10;\nvar board = [];\nvar gameStarted = false;\nvar clickedElement = null;\n\nfunction createBoard(width, height) {\n    for (var i = 0; i < width; i++){\n        board[i] = [];\n        for (var j = 0; j < height; j++){\n            board[i][j] = Math.random() > 0.8 ? 'mine' : 'clear';\n        }\n    }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n    document.getElementById('score').innerText = 0;\n    createBoard(width, height);\n    generateMinefield(width, height);\n    gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n    clearInterval(gameInterval);\n    gameInterval = null;\n    document.getElementById('upgradeMenu').style.display = \"block\";\n    document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    if (gameInterval === null) {\n        gameInterval = setInterval(runGame, 1000);\n    }\n}\n\nfunction closeUpgradeMenu() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n    for (var i = 0; i < width; i++){\n        for (var j = 0; j < height; j++){\n            var square = document.createElement('div');\n            square.classList.add(board[i][j]);\n            square.dataset.i = i;\n            square.dataset.j = j;\n            square.addEventListener('click', squareClicked);\n            minefield.appendChild(square);\n        }\n    }\n}\n\nfunction squareClicked(e) {\n    clickedElement = e.target;\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    if (!gameStarted) {\n        gameStarted = true;\n        clearArea(i, j);\n    }\n    e.target.classList.add('revealed');\n    var mines = countMines(i, j);\n    e.target.textContent = mines > 0 ? mines : '';\n    if (mines === 0) {\n        revealClearArea(i, j);\n    }\n}\n\nfunction runGame() {\n    // Add game logic here\n}\n\nfunction clearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                board[x][y] = 'clear';\n                let square = minefield.children[x * width + y];\n                square.classList.remove('mine');\n                square.classList.add('clear');\n            }\n        }\n    }\n}\n\nfunction countMines(i, j) {\n    var mines = 0;\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                mines++;\n            }\n        }\n    }\n    return mines;\n}\n\nfunction revealClearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            let square = minefield.children[x * width + y];\n            if (!square.classList.contains('revealed')) {\n                square.classList.add('revealed');\n                if (board[x][y] !== 'mine') {\n                    square.click();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n    <div id=\"gameWindow\">\n        <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n        <button id=\"startButton\">Start Game</button>\n        <button id=\"pauseButton\">Pause Game</button>\n        <div id=\"minefield\"></div>\n        <div id=\"upgradeMenu\" class=\"panel\">\n             <button id=\"closeUpgradeMenu\">Close</button>\n             <h2>Upgrades:</h2>\n             <p id=\"upgradeText\"></p>\n             <button id=\"resumeButton\">Resume Game</button>\n        </div>\n    </div>\n</body>",
    "css": "#gameWindow {\n    width: 800px;\n    height: 800px;\n    border: 2px solid black;\n    position: relative;\n    margin: auto;\n}\n\n#scoreBoard {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 20px;\n}\n\n#startButton, #pauseButton {\n    position: absolute;\n    top: 50px;\n    left: 10px;\n}\n\n#pauseButton {\n    top: 90px;\n}\n\n#minefield {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between; \n}\n\n#minefield div {\n    width: 5%;\n    height: 5%;\n    box-sizing: border-box;\n    border: 1px solid black;\n}\n\n.mine.revealed{\n    background-color: red;\n}\n\n.marked {\n    background-color: orange;\n}\n\n.clear.revealed {\n    background-color: white;\n}\n\n.panel {\n    position: absolute;\n    top: 40px;\n    right: 20px;\n    padding: 20px;\n    border: 2px solid black;\n    background-color: white;\n    width: 240px;\n    display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n    display: block;\n    margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 20;\nvar height = 20;\nvar board = [];\nvar gameStarted = false;\nvar clickedElement = null;\n\nfunction createBoard(width, height) {\n    for (var i = 0; i < width; i++){\n        board[i] = [];\n        for (var j = 0; j < height; j++){\n            board[i][j] = Math.random() > 0.6 ? 'mine' : 'clear';\n        }\n    }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n    document.getElementById('score').innerText = 0;\n    createBoard(width, height);\n    generateMinefield(width, height);\n    gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n    clearInterval(gameInterval);\n    gameInterval = null;\n    document.getElementById('upgradeMenu').style.display = \"block\";\n    document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    if (gameInterval === null) {\n        gameInterval = setInterval(runGame, 1000);\n    }\n}\n\nfunction closeUpgradeMenu() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n    for (var i = 0; i < width; i++){\n        for (var j = 0; j < height; j++){\n            var square = document.createElement('div');\n            square.classList.add(board[i][j]);\n            square.dataset.i = i;\n            square.dataset.j = j;\n            square.addEventListener('click', squareClicked);\n            square.addEventListener('contextmenu', squareMarked)\n            minefield.appendChild(square);\n        }\n    }\n}\n\nfunction squareMarked(e){\n    e.preventDefault();\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    e.target.classList.add('marked');\n}\n\nfunction squareClicked(e) {\n    clickedElement = e.target;\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    if (!gameStarted) {\n        gameStarted = true;\n        clearArea(i, j);\n    }\n    e.target.classList.add('revealed');\n    var mines = countMines(i, j);\n    e.target.textContent = mines > 0 ? mines : '';\n    if (mines === 0) {\n        revealClearArea(i, j);\n    }\n}\n\nfunction runGame() {\n    // Add game logic here\n}\n\nfunction clearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                board[x][y] = 'clear';\n                let square = minefield.children[x * width + y];\n                square.classList.remove('mine');\n                square.classList.add('clear');\n            }\n        }\n    }\n}\n\nfunction countMines(i, j) {\n    var mines = 0;\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                mines++;\n            }\n        }\n    }\n    return mines;\n}\n\nfunction revealClearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            let square = minefield.children[x * width + y];\n            if (!square.classList.contains('revealed')) {\n                square.classList.add('revealed');\n                if (board[x][y] !== 'mine') {\n                    square.click();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "title": "Minesweeper",
    "html": "<body>\n    <div id=\"gameWindow\">\n        <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n        <button id=\"startButton\">Start Game</button>\n        <button id=\"pauseButton\">Pause Game</button>\n        <div id=\"minefield\"></div>\n        <div id=\"upgradeMenu\" class=\"panel\">\n             <button id=\"closeUpgradeMenu\">Close</button>\n             <h2>Upgrades:</h2>\n             <p id=\"upgradeText\"></p>\n             <button id=\"resumeButton\">Resume Game</button>\n        </div>\n    </div>\n</body>",
    "css": "#gameWindow {\n    width: 800px;\n    height: 800px;\n    border: 2px solid black;\n    position: relative;\n    margin: auto;\n}\n\n#scoreBoard {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 20px;\n}\n\n#startButton, #pauseButton {\n    position: absolute;\n    top: 50px;\n    left: 10px;\n}\n\n#pauseButton {\n    top: 90px;\n}\n\n#minefield {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between; \n}\n\n#minefield div {\n    width: 5%;\n    height: 5%;\n    box-sizing: border-box;\n    border: 1px solid black;\n}\n\n.mine.revealed{\n    background-color: red;\n}\n\n.marked {\n    background-color: orange;\n}\n\n.clear.revealed {\n    background-color: white;\n}\n\n.panel {\n    position: absolute;\n    top: 40px;\n    right: 20px;\n    padding: 20px;\n    border: 2px solid black;\n    background-color: white;\n    width: 240px;\n    display: none;\n}\n\n#resumeButton, #closeUpgradeMenu {\n    display: block;\n    margin-top: 20px;\n}",
    "javascript": "var gameInterval = null;\nvar minefield = document.getElementById('minefield');\nvar width = 20;\nvar height = 20;\nvar board = [];\nvar gameStarted = false;\nvar clickedElement = null;\n\nfunction createBoard(width, height) {\n    for (var i = 0; i < width; i++){\n        board[i] = [];\n        for (var j = 0; j < height; j++){\n            board[i][j] = Math.random() > 0.7 ? 'mine' : 'clear';\n        }\n    }\n}\n\ndocument.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('resumeButton').addEventListener('click', resumeGame);\ndocument.getElementById('closeUpgradeMenu').addEventListener('click', closeUpgradeMenu);\n\nfunction startGame() {\n    document.getElementById('score').innerText = 0;\n    createBoard(width, height);\n    generateMinefield(width, height);\n    gameInterval = setInterval(runGame, 1000);\n}\n\nfunction pauseGame() {\n    clearInterval(gameInterval);\n    gameInterval = null;\n    document.getElementById('upgradeMenu').style.display = \"block\";\n    document.getElementById('upgradeText').innerText = \"Game paused.\";\n}\n\nfunction resumeGame() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    if (gameInterval === null) {\n        gameInterval = setInterval(runGame, 1000);\n    }\n}\n\nfunction closeUpgradeMenu() {\n    document.getElementById('upgradeMenu').style.display = \"none\";\n    document.getElementById('upgradeText').innerText = \"\";\n}\n\nfunction generateMinefield(width, height) {\n    for (var i = 0; i < width; i++){\n        for (var j = 0; j < height; j++){\n            var square = document.createElement('div');\n            square.classList.add(board[i][j]);\n            square.dataset.i = i;\n            square.dataset.j = j;\n            square.addEventListener('click', squareClicked);\n            square.addEventListener('contextmenu', squareMarked);\n            minefield.appendChild(square);\n        }\n    }\n}\n\nfunction squareMarked(e){\n    e.preventDefault();\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    e.target.classList.add('marked');\n}\n\nfunction squareClicked(e) {\n    clickedElement = e.target;\n    var i = parseInt(e.target.dataset.i);\n    var j = parseInt(e.target.dataset.j);\n    if (!gameStarted) {\n        gameStarted = true;\n        clearArea(i, j);\n    }\n    e.target.classList.add('revealed');\n    var mines = countMines(i, j);\n    e.target.textContent = mines > 0 ? mines : '';\n    if (mines === 0) {\n        revealClearArea(i, j);\n    }\n}\n\nfunction runGame() {\n    // Add game logic here\n}\n\nfunction clearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                board[x][y] = 'clear';\n                let square = minefield.children[x * width + y];\n                square.classList.remove('mine');\n                square.classList.add('clear');\n            }\n        }\n    }\n}\n\nfunction countMines(i, j) {\n    var mines = 0;\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            if (board[x][y] === 'mine') {\n                mines++;\n            }\n        }\n    }\n    return mines;\n}\n\nfunction revealClearArea(i, j) {\n    for (var x = Math.max(i - 1, 0); x <= Math.min(i + 1, width - 1); x++) {\n        for (var y = Math.max(j - 1, 0); y <= Math.min(j + 1, height - 1); y++) {\n            let square = minefield.children[x * width + y];\n            if (!square.classList.contains('revealed')) {\n                square.classList.add('revealed');\n                if (board[x][y] !== 'mine') {\n                    square.click();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"menu\">\n    <button id=\"startButton\">Start Game</button>\n    <button id=\"pauseButton\">Pause</button>\n    <button id=\"updateButton\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 2;\n}\n\n#menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#startButton, #pauseButton {\n  display : none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 200px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 1;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('pauseButton').addEventListener('click', pauseGame);\ndocument.getElementById('updateButton').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startButton').style.display = \"none\";\n  document.getElementById('pauseButton').style.display = \"inline\";\n  document.getElementById('updateButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n  \n  // Chess game logic will go here\n  initializeChessBoard();\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    gamePaused = true;\n    document.getElementById('pauseButton').innerText = \"Resume\";\n  } else {\n    gamePaused = false;\n    document.getElementById('pauseButton').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startButton').style.display = \"inline\";\n  document.getElementById('pauseButton').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#gameMenu, #menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "document.getElementById('startGame').addEventListener('click', startGame);\ndocument.getElementById('pauseGame').addEventListener('click', pauseGame);\ndocument.getElementById('openUpdates').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startGame').style.display = \"none\";\n  document.getElementById('pauseGame').style.display = \"inline\";\n  document.getElementById('openUpdates').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n\n  // Chess game logic will go here\n  initializeChessBoard();\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    gamePaused = true;\n    document.getElementById('pauseGame').innerText = \"Resume\";\n  } else {\n    gamePaused = false;\n    document.getElementById('pauseGame').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startGame').style.display = \"inline\";\n  document.getElementById('pauseGame').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#gameMenu, #menu {\n  position: absolute;\n  top: 30px;\n  left: 40px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "document.getElementById('startGame').addEventListener('click', startGame);\ndocument.getElementById('pauseGame').addEventListener('click', pauseGame);\ndocument.getElementById('openUpdates').addEventListener('click', updateGame);\ndocument.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\nvar gamePaused = false;\n\nfunction startGame() {\n  gamePaused = false;\n  document.getElementById('score').innerText = 0;\n  document.getElementById('startGame').style.display = \"none\";\n  document.getElementById('pauseGame').style.display = \"inline\";\n  document.getElementById('openUpdates').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"none\";\n  document.getElementById('updateMenu').style.display = \"none\";\n\n  // Chess game logic will go here\n  initializeChessBoard();\n}\n\nfunction pauseGame() {\n  if(!gamePaused) {\n    gamePaused = true;\n    document.getElementById('pauseGame').innerText = \"Resume\";\n  } else {\n    gamePaused = false;\n    document.getElementById('pauseGame').innerText = \"Pause\";\n  }\n}\n\nfunction updateGame() {\n  gamePaused = true;\n  document.getElementById('updateMenu').style.display = \"block\";\n  document.getElementById('updateText').innerText = \"Your game updates here.\";\n  document.getElementById('startGame').style.display = \"inline\";\n  document.getElementById('pauseGame').style.display = \"none\";\n  document.getElementById('closeUpdates').style.display = \"inline\";\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = \"none\";\n  gamePaused = false;\n}\n\nfunction initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  const pieces = ['Rook', 'Knight', 'Bishop', 'Queen', 'King', 'Bishop', 'Knight', 'Rook'];\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    if(i < 8 || i >= 56){\n      div.innerText = pieces[i%8];\n    }\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\" style=\"display: none;\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\" style=\"display: none;\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#gameMenu, #menu {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  display: none;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div {\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "window.onload = function() {\n  document.getElementById('startGame').addEventListener('click', startGame);\n  document.getElementById('pauseGame').addEventListener('click', pauseGame);\n  document.getElementById('openUpdates').addEventListener('click', updateGame);\n  document.getElementById('closeUpdates').addEventListener('click', closeUpdateMenu);\n\n  var gamePaused = false;\n\n  function startGame() {\n    gamePaused = false;\n    document.getElementById('score').innerText = 0;\n    document.getElementById('startGame').style.display = \"none\";\n    document.getElementById('pauseGame').style.display = \"inline\";\n    document.getElementById('openUpdates').style.display = \"inline\";\n    document.getElementById('closeUpdates').style.display = \"none\";\n    document.getElementById('updateMenu').style.display = \"none\";\n\n    // Chess game logic will go here\n    initializeChessBoard();\n  }\n\n  function pauseGame() {\n    if(!gamePaused) {\n      gamePaused = true;\n      document.getElementById('pauseGame').innerText = \"Resume\";\n    } else {\n      gamePaused = false;\n      document.getElementById('pauseGame').innerText = \"Pause\";\n    }\n  }\n\n  function updateGame() {\n    gamePaused = true;\n    document.getElementById('updateMenu').style.display = \"block\";\n    document.getElementById('updateText').innerText = \"Your game updates here.\";\n    document.getElementById('startGame').style.display = \"none\";\n    document.getElementById('pauseGame').style.display = \"none\";\n    document.getElementById('closeUpdates').style.display = \"inline\";\n    document.getElementById('openUpdates').style.display = \"none\";\n  }\n\n  function closeUpdateMenu() {\n    document.getElementById('updateMenu').style.display = \"none\";\n    document.getElementById('openUpdates').style.display = \"inline\";\n    gamePaused = false;\n  }\n\n  function initializeChessBoard() {\n    const board = document.getElementById('chessBoard');\n    const pieces = ['Rook', 'Knight', 'Bishop', 'Queen', 'King', 'Bishop', 'Knight', 'Rook'];\n    for (let i = 0; i < 64; i++) {\n      const div = document.createElement('div');\n      if(i < 8 || i >= 56){\n        div.innerText = pieces[i%8];\n      }\n      board.appendChild(div);\n    }\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n#scoreBoard, #gameMenu button, #menu button, #updateMenu, #pauseGame {\n  display: none;\n}\n\n#gameMenu button, #menu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n.chess-piece {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n  cursor: pointer;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet activePiece = null;\nlet score = 0;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n    if (!gamePaused) {\n      activePiece = null;\n    }\n  }\n\n  function openUpdates() {\n    document.getElementById('updateMenu').style.display = 'block';\n    openUpdatesBtn.style.display = 'none';\n    closeUpdatesBtn.style.display = 'inline';\n  }\n\n  function closeUpdates() {\n    document.getElementById('updateMenu').style.display = 'none';\n    openUpdatesBtn.style.display = 'inline';\n    closeUpdatesBtn.style.display = 'none';\n  }\n\n  function initializeChessBoard() {\n    const pieces = ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'];\n    const chessBoard = document.getElementById('chessBoard');\n\n    for (let i = 0; i < 64; i++) {\n      const cell = document.createElement('div');\n      if (i < 8 || (i >= 48 && i < 56)) {\n        const piece = document.createElement('div');\n        piece.className = 'chess-piece';\n        piece.textContent = (i < 8 ? pieces[i] : pieces[i - 48]);\n        piece.addEventListener('click', function() {\n          if (!gamePaused && (!activePiece || activePiece === piece)) {\n            piece.style.backgroundColor = piece.style.backgroundColor ? '' : 'blue';\n            activePiece = piece.style.backgroundColor ? piece : null;\n          }\n        });\n        cell.appendChild(piece);\n      }\n      chessBoard.appendChild(cell);\n    }\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n.chess-piece {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  color: red;\n  cursor: pointer;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n  const board = document.getElementById('chessBoard');\n  for (let i = 0; i < 64; i++) {\n    const div = document.createElement('div');\n    board.appendChild(div);\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 100%;\n  height: 100%;\n}\n\n#chessBoard div:nth-child(odd) {\n  background-color: white;\n}\n\n#chessBoard div:nth-child(even) {\n  background-color: black;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    const board = document.getElementById('chessBoard');\n    for (let i = 0; i < 64; i++) {\n      const square = document.createElement('div');\n      board.appendChild(square);\n      if ((i + Math.floor(i/8)) % 2 === 0) {\n        square.style.backgroundColor = 'white';\n      } else {\n        square.style.backgroundColor = 'black';\n      }\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    const boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"], \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n    const board = document.getElementById('chessBoard');\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardPieces[row][col];\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('scoreBoard');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    const boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n    const board = document.getElementById('chessBoard');\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardPieces[row][col];\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n          square.addEventListener('click', function() {\n            this.classList.add('selected');\n          });\n        }\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    const board = document.getElementById('chessBoard');\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardPieces[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        const endSquare = document.getElementById(`square-${row}-${col}`);\n        const startSquare = document.getElementById(`square-${selectedSquare[0]}-${selectedSquare[1]}`);\n        startSquare.textContent = \"\";\n        endSquare.textContent = selectedPiece;\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    if (selectedPiece) {\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (this.textContent !== \"\") {\n      selectedPiece = this.textContent;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    } else if (selectedPiece && this.textContent === \"\") {\n      boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n      boardState[row][col] = selectedPiece;\n      selectedPiece = null;\n      selectedSquare = null;\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "function selectSquare() {\n  const coordStr = this.id.split('-').slice(1);\n  const coords = coordStr.map(str => parseInt(str));\n  const [row, col] = coords;\n  if (selectedPiece) {\n    boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n    boardState[row][col] = selectedPiece;\n    selectedPiece = null;\n    selectedSquare = null;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  } else if (this.textContent !== \"\") {\n    selectedPiece = this.textContent;\n    selectedSquare = coords;\n    this.classList.add('selected');\n  }\n}"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow - 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow + 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      return endRow === startRow + 1 && startCol === endCol;\n    } else if (piece === 'p') {\n      return endRow === startRow - 1 && startCol === endCol;\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: white;\n}\n\n#chessBoard .black-square {\n  background-color: black;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 || endRow === startRow + 2) && startCol === endCol;\n      } else {\n        return endRow === startRow + 1 && startCol === endCol;\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 || endRow === startRow - 2) && startCol === endCol;\n      } else {\n        return endRow === startRow - 1 && startCol === endCol;\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 && startCol === endCol) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow + 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 && startCol === endCol) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow - 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 && startCol === endCol) || (endRow === startRow + 2 && startCol === endCol) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow + 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 && startCol === endCol) || (endRow === startRow - 2 && startCol === endCol) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1);\n      } else {\n        return endRow === startRow - 1 && (startCol === endCol || Math.abs(startCol - endCol) === 1);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1], 'p': [6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'].includes(startRow)) {\n        firstMove['P'] = firstMove['P'].filter(row => row !== startRow);\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'].includes(startRow)) {\n        firstMove['p'] = firstMove['p'].filter(row => row !== startRow);\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol]);\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  \n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      if (pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords) || knightRules([selectedSquare[0],selectedSquare[1]], coords) || bishopRules([selectedSquare[0],selectedSquare[1]], coords)) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .p, #chessBoard .r, #chessBoard .n, #chessBoard .b, #chessBoard .q, #chessBoard .k {\n  color: black;\n}\n\n#chessBoard .P, #chessBoard .R, #chessBoard .N, #chessBoard .B, #chessBoard .Q, #chessBoard .K {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'P': [1, 1, 1, 1, 1, 1, 1, 1], 'p': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],   \n        [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"], \n        [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece.toLowerCase());\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'P') {\n      if (firstMove['P'][startCol] === startRow) {\n        firstMove['P'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toLowerCase());\n      }\n    } else if (piece === 'p') {\n      if (firstMove['p'][startCol] === startRow) {\n        firstMove['p'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol] === boardState[endRow][endCol].toUpperCase());\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece.toLowerCase() === piece.toLowerCase()) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.toLowerCase() !== selectedPiece.toLowerCase()) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece === piece.toUpperCase()) || (currentPlayer === 'black' && piece === piece.toLowerCase()))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\nlet castlingDone = { 'w': false, 'b': false };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\nlet castlingDone = { 'w': false, 'b': false };\nlet movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard {\n  display: none;\n}\n\n#gameMenu button, #menu button, #updateMenu button {\n  margin: 15px;\n}\n\n#pauseGame, #menu button, #updateMenu {\n  display: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false;\nlet gamePaused = false;\nlet score = 0;\nlet updates = [\"Update 1\", \"Update 2\"];\nlet selectedPiece = null;\nlet selectedSquare = null;\nlet boardState;\nlet currentPlayer = 'white';\nlet firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] };\nlet castlingDone = { 'w': false, 'b': false };\nlet movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\n\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame');\n  const pauseGameBtn = document.getElementById('pauseGame');\n  const scoreBoard = document.getElementById('score');\n  const openUpdatesBtn = document.getElementById('openUpdates');\n  const closeUpdatesBtn = document.getElementById('closeUpdates');\n  const updateMenu = document.getElementById('updateMenu');\n  const updateText = document.getElementById('updateText');\n  const boardStateDisplay = document.getElementById('boardStateDisplay');\n\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n        [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],   \n        [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], \n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], \n        [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]\n      ];\n\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return startRow === endRow || startCol === endCol;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol);\n  }\n  function queenRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) === Math.abs(startCol - endCol) || startRow === endRow || startCol === endCol;\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        firstMove['wp'][startCol] = null;\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        firstMove['bp'][startCol] = null;\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n    alert(\"Possible moves: \" + possibleMoves.map(move => `(${move[0]}, ${move[1]})`).join(\", \"));\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {width: 800px;height: 800px;border: 2px solid black;margin: auto;position: relative;display: flex;flex-direction: column;align-items: center;justify-content: center;}\n#scoreBoard, #pauseGame, #menu button, #updateMenu {display: none;}\n#gameMenu button, #menu button, #updateMenu button {margin: 15px;}\n#updateMenu {position: absolute;top: 100px;left: 40px;border: 1px solid black;background-color: white;padding: 10px;width: 300px;z-index: 10;}\n#gameArea {width: 60%;height: 80%;display: flex;justify-content: center;align-items: center;background-color: lightgrey;}\n#chessBoard {display: grid;grid-template-columns: repeat(8, 1fr);grid-template-rows: repeat(8, 1fr);width: 680px;height: 680px;}\n#chessBoard div {display: flex;justify-content: center;align-items: center;}\n#chessBoard .white-square {background-color: #f0d9b5;}\n#chessBoard .black-square {background-color: #b58863;}\n#chessBoard .bp, #chessBoard .br, #chessBoard .bn, #chessBoard .bb, #chessBoard .bq, #chessBoard .bk {color: black;}\n#chessBoard .wp, #chessBoard .wr, #chessBoard .wn, #chessBoard .wb, #chessBoard .wq, #chessBoard .wk {color: white;}\n#chessBoard .selected {background-color: green;}\n#chessBoard .highlight {background-color: yellow;}\n#boardStateDisplay {width: 200px;height: 200px;border: 1px solid black;margin-top: 20px;display: flex;flex-direction: column;justify-content: center;align-items: center;}\n#boardStateDisplay div {display: flex;}\n#boardStateDisplay span {margin: 0 5px;}",
    "javascript": "let gameStarted = false, gamePaused = false, score = 0, updates = [\"Update 1\", \"Update 2\"], selectedPiece = null, selectedSquare = null, boardState, currentPlayer = 'white', firstMove = { 'wp': [1, 1, 1, 1, 1, 1, 1, 1], 'bp': [6, 6, 6, 6, 6, 6, 6, 6] }, castlingDone = { 'w': false, 'b': false }, movedPieces = { 'wk': false, 'bk': false, 'wr': [false, false], 'br': [false, false] };\nwindow.onload = function() {\n  const startGameBtn = document.getElementById('startGame'), pauseGameBtn = document.getElementById('pauseGame'), scoreBoard = document.getElementById('score'), openUpdatesBtn = document.getElementById('openUpdates'), closeUpdatesBtn = document.getElementById('closeUpdates'), updateMenu = document.getElementById('updateMenu'), updateText = document.getElementById('updateText'), boardStateDisplay = document.getElementById('boardStateDisplay');\n  startGameBtn.addEventListener('click', startGame);\n  pauseGameBtn.addEventListener('click', togglePauseGame);\n  openUpdatesBtn.addEventListener('click', openUpdates);\n  closeUpdatesBtn.addEventListener('click', closeUpdates);\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = 'none';\n      pauseGameBtn.style.display = 'inline';\n      scoreBoard.style.display = 'inline';\n      openUpdatesBtn.style.display = 'inline';\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? 'Resume' : 'Pause';\n  }\n  function openUpdates() {\n    updateMenu.style.display = 'block';\n    gamePaused = true;\n    pauseGameBtn.textContent = 'Resume';\n  }\n  function closeUpdates() {\n    updateMenu.style.display = 'none';\n    gamePaused = false;\n    pauseGameBtn.textContent = 'Pause';\n  }\n  function initializeChessBoard() {\n    let boardPieces = [[\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"], [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"], [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"]];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n  function drawChessBoard(boardState) {\n    const board = document.getElementById('chessBoard');\n    board.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement('div');\n        const piece = boardState[row][col];\n        square.id = 'square-' + row + '-' + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener('click', selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add('white-square');\n        } else {\n          square.classList.add('black-square');\n        }\n      }\n    }\n  }\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = '';\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement('div');\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement('span');\n        piece.textContent = boardState[row][col] || '-';\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case 'p':\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case 'r':\n            isValidMove = rookRules(start, end);\n            break;\n          case 'n':\n            isValidMove = knightRules(start, end);\n            break;\n          case 'b':\n            isValidMove = bishopRules(start, end);\n            break;\n          case 'q':\n            isValidMove = queenRules(start, end);\n            break;\n          case 'k':\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add('highlight');\n    });\n    if (piece.substring(1).toLowerCase() === 'b') {\n      alert(`Bishop can move to: ${possibleMoves.map(move => `(${move[0]}, ${move[1]})`).join(', ')}`);\n    }\n  }\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === 'wp') {\n      if (firstMove['wp'][startCol] === startRow) {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      } else {\n        return (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow + 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('b'));\n      }\n    } else if (piece === 'bp') {\n      if (firstMove['bp'][startCol] === startRow) {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      } else {\n        return (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) || (endRow === startRow - 1 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] && boardState[endRow][endCol].startsWith('w'));\n      }\n    }\n    return false;\n  }\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection, c = startCol + colDirection;\n      while (r !== endRow && c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split('-').slice(1);\n    const coords = coordStr.map(str => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case 'p':\n          isValidMove = pawnRules(selectedPiece, [selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'r':\n          isValidMove = rookRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'n':\n          isValidMove = knightRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'b':\n          isValidMove = bishopRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'q':\n          isValidMove = queenRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        case 'k':\n          isValidMove = kingRules([selectedSquare[0],selectedSquare[1]], coords) || castlingRules([selectedSquare[0],selectedSquare[1]], coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === 'wp' && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'w' + newPiece;\n        } else if (selectedPiece === 'bp' && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = 'b' + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === 'k' && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === 'white' ? 'black' : 'white';\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (piece && ((currentPlayer === 'white' && piece.startsWith('w')) || (currentPlayer === 'black' && piece.startsWith('b')))) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add('selected');\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck() {\n    const kingPosition = findKingPosition(currentPlayer);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] !== currentPlayer[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (boardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck()) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(\"Check!\");\n        }\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"Black\" : \"White\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer === \"white\" ? \"black\" : \"white\")) {\n          alert(`${currentPlayer === \"white\" ? \"Black\" : \"White\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"White\" : \"Black\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"White\" : \"Black\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer === \"white\" ? \"White\" : \"Black\"} king is in check!`);\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (isValidMove && (!boardState[row][col] || boardState[row][col][0] !== piece[0])) {\n          possibleMoves.push(end);\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 && startCol === endCol && !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let i = Math.min(startCol, endCol) + 1; i < Math.max(startCol, endCol); i++) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (let i = Math.min(startRow, endRow) + 1; i < Math.max(startRow, endRow); i++) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (rowDifference === 2 && colDifference === 1) || (rowDifference === 1 && colDifference === 2);\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow !== endRow || Math.abs(startCol - endCol) !== 2 || castlingDone[currentPlayer]) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: red;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: red;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      if (square.classList.contains(\"check-highlight\")) {\n        square.classList.remove(\"check-highlight\");\n        square.classList.add(\"highlight\");\n      } else {\n        square.classList.add(\"highlight\");\n      }\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: red;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      if (square.classList.contains(\"check-highlight\")) {\n        square.classList.remove(\"check-highlight\");\n        square.classList.add(\"highlight\");\n      } else {\n        square.classList.add(\"highlight\");\n      }\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        \n        if (isKingInCheck(boardState, \"white\")) {\n          alert(\"White king is in check!\");\n        }\n        if (isKingInCheck(boardState, \"black\")) {\n          alert(\"Black king is in check!\");\n        }\n        \n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, currentPlayer)) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] };\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow - 1][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\"))\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 2 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol] &&\n            !boardState[endRow + 1][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\"))\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      const tempBoardState = JSON.parse(JSON.stringify(boardState));\n      tempBoardState[endRow][endCol] = tempBoardState[startRow][startCol];\n      tempBoardState[startRow][startCol] = \"\";\n      return !isKingInCheck(tempBoardState, currentPlayer);\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[currentPlayer]\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          alert(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} king is in check!`);\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 800px;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  background-color: green;\n}\n\n#chessBoard .highlight {\n  background-color: yellow;\n}\n\n#chessBoard .check-highlight {\n  background-color: orange;\n}\n\n#boardStateDisplay {\n  width: 200px;\n  height: 200px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n#boardStateDisplay div {\n  display: flex;\n}\n\n#boardStateDisplay span {\n  margin: 0 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  castlingDone = { w: false, b: false },\n  movedPieces = { wk: false, bk: false, wr: [false, false], br: [false, false] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      castlingDone[player] ||\n      movedPieces[player + \"k\"] ||\n      movedPieces[player + \"r\"][rookCol === 7 ? 1 : 0] ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\" && Math.abs(selectedSquare[1] - col) === 2) {\n          if (col > selectedSquare[1]) {\n            boardState[row][col - 1] = boardState[row][7];\n            boardState[row][7] = \"\";\n          } else {\n            boardState[row][col + 1] = boardState[row][0];\n            boardState[row][0] = \"\";\n          }\n          movedPieces[selectedPiece[0] + \"k\"] = true;\n          movedPieces[selectedPiece[0] + \"r\"][col > selectedSquare[1] ? 1 : 0] = true;\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 2px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 2px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 2px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [1, 1, 1, 1, 1, 1, 1, 1],\n    bp: [6, 6, 6, 6, 6, 6, 6, 6],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n              alert(`Rook on the right has moved ${rookMoves[selectedPiece[0] + \"r\"][1]} times.`);\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n              alert(`Rook on the left has moved ${rookMoves[selectedPiece[0] + \"r\"][0]} times.`);\n            }\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"w\" + newPiece;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          let newPiece = prompt(\"Choose a piece to promote to (q, r, b, n):\");\n          selectedPiece = \"b\" + newPiece;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol)\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) || castlingRules(start, end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player) {\n    const kingPosition = findKingPosition(tempBoardState, player);\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Chess",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameMenu\">\n    <button id=\"startGame\">Start Game</button>\n    <button id=\"pauseGame\">Pause</button>\n  </div>\n  <div id=\"menu\">\n    <button id=\"openUpdates\">Updates</button>\n  </div>\n  <div id=\"updateMenu\">\n    <h2>Updates:</h2>\n    <p id=\"updateText\"></p>\n    <button id=\"closeUpdates\">Close Updates</button>\n  </div>\n  <div id=\"gameArea\">\n    <div id=\"chessBoard\"></div>\n  </div>\n  <div id=\"promotionMenu\">\n    <button class=\"promotionOption\" data-piece=\"q\">Queen</button>\n    <button class=\"promotionOption\" data-piece=\"r\">Rook</button>\n    <button class=\"promotionOption\" data-piece=\"b\">Bishop</button>\n    <button class=\"promotionOption\" data-piece=\"n\">Knight</button>\n  </div>\n  <div id=\"boardStateDisplay\"></div>\n</div>",
    "css": "#gameWindow {\n  width: auto;\n  height: auto;\n  border: 2px solid black;\n  margin: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n#scoreBoard,\n#pauseGame,\n#menu button,\n#updateMenu {\n  display: none;\n}\n\n#gameMenu button,\n#menu button,\n#updateMenu button {\n  margin: 15px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 40px;\n  border: 1px solid black;\n  background-color: white;\n  padding: 10px;\n  width: 300px;\n  z-index: 10;\n}\n\n#gameArea {\n  width: 60%;\n  height: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n}\n\n#chessBoard {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  width: 680px;\n  height: 680px;\n}\n\n#chessBoard div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n#chessBoard .white-square {\n  background-color: #f0d9b5;\n}\n\n#chessBoard .black-square {\n  background-color: #b58863;\n}\n\n#chessBoard .bp,\n#chessBoard .br,\n#chessBoard .bn,\n#chessBoard .bb,\n#chessBoard .bq,\n#chessBoard .bk {\n  color: black;\n}\n\n#chessBoard .wp,\n#chessBoard .wr,\n#chessBoard .wn,\n#chessBoard .wb,\n#chessBoard .wq,\n#chessBoard .wk {\n  color: white;\n}\n\n#chessBoard .selected {\n  outline: 3px solid green;\n}\n\n#chessBoard .highlight {\n  outline: 3px solid yellow;\n}\n\n#chessBoard .check-highlight {\n  outline: 3px solid orange;\n}\n\n#boardStateDisplay {\n  width: 220px;\n  height: 220px;\n  border: 1px solid black;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  background-color: #f8f8f8;\n  padding: 10px;\n}\n\n#boardStateDisplay div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e0e0e0;\n  font-size: 18px;\n  color: #333;\n}\n\n#boardStateDisplay span {\n  margin: 0 2px;\n}\n\n#promotionMenu {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 20;\n}\n\n#promotionMenu button {\n  margin: 5px;\n}",
    "javascript": "let gameStarted = false,\n  gamePaused = false,\n  score = 0,\n  updates = [\"Update 1\", \"Update 2\"],\n  selectedPiece = null,\n  selectedSquare = null,\n  boardState,\n  currentPlayer = \"white\",\n  firstMove = {\n    wp: [6, 6, 6, 6, 6, 6, 6, 6],\n    bp: [1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  kingMoves = { w: 0, b: 0 },\n  rookMoves = { wr: [0, 0], br: [0, 0] },\n  enPassantTarget = null;\n\nwindow.onload = function () {\n  const startGameBtn = document.getElementById(\"startGame\"),\n    pauseGameBtn = document.getElementById(\"pauseGame\"),\n    scoreBoard = document.getElementById(\"score\"),\n    openUpdatesBtn = document.getElementById(\"openUpdates\"),\n    closeUpdatesBtn = document.getElementById(\"closeUpdates\"),\n    updateMenu = document.getElementById(\"updateMenu\"),\n    updateText = document.getElementById(\"updateText\"),\n    boardStateDisplay = document.getElementById(\"boardStateDisplay\"),\n    promotionMenu = document.getElementById(\"promotionMenu\"),\n    promotionOptions = document.querySelectorAll(\".promotionOption\");\n\n  startGameBtn.addEventListener(\"click\", startGame);\n  pauseGameBtn.addEventListener(\"click\", togglePauseGame);\n  openUpdatesBtn.addEventListener(\"click\", openUpdates);\n  closeUpdatesBtn.addEventListener(\"click\", closeUpdates);\n\n  promotionOptions.forEach(button => {\n    button.addEventListener(\"click\", function() {\n      const newPiece = this.getAttribute(\"data-piece\");\n      boardState[selectedSquare[0]][selectedSquare[1]] = currentPlayer[0] + newPiece;\n      promotionMenu.style.display = \"none\";\n      currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n      drawChessBoard(boardState);\n      displayBoardState(boardState);\n    });\n  });\n\n  function startGame() {\n    if (!gameStarted) {\n      initializeChessBoard();\n      startGameBtn.style.display = \"none\";\n      pauseGameBtn.style.display = \"inline\";\n      scoreBoard.style.display = \"inline\";\n      openUpdatesBtn.style.display = \"inline\";\n      updateText.textContent = updates.join(\"\\n\\n\");\n      gameStarted = true;\n    }\n  }\n\n  function togglePauseGame() {\n    gamePaused = !gamePaused;\n    pauseGameBtn.textContent = gamePaused ? \"Resume\" : \"Pause\";\n  }\n\n  function openUpdates() {\n    updateMenu.style.display = \"block\";\n    gamePaused = true;\n    pauseGameBtn.textContent = \"Resume\";\n  }\n\n  function closeUpdates() {\n    updateMenu.style.display = \"none\";\n    gamePaused = false;\n    pauseGameBtn.textContent = \"Pause\";\n  }\n\n  function initializeChessBoard() {\n    let boardPieces = [\n      [\"br\", \"bn\", \"bb\", \"bq\", \"bk\", \"bb\", \"bn\", \"br\"],\n      [\"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\", \"bp\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\", \"wp\"],\n      [\"wr\", \"wn\", \"wb\", \"wq\", \"wk\", \"wb\", \"wn\", \"wr\"],\n    ];\n    boardState = boardPieces;\n    drawChessBoard(boardState);\n    displayBoardState(boardState);\n  }\n\n  function drawChessBoard(boardState) {\n    const board = document.getElementById(\"chessBoard\");\n    board.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const square = document.createElement(\"div\");\n        const piece = boardState[row][col];\n        square.id = \"square-\" + row + \"-\" + col;\n        if (piece) {\n          square.textContent = piece;\n          square.classList.add(piece);\n        }\n        square.addEventListener(\"click\", selectSquare);\n        board.appendChild(square);\n        if ((row + col) % 2 === 0) {\n          square.classList.add(\"white-square\");\n        } else {\n          square.classList.add(\"black-square\");\n        }\n      }\n    }\n  }\n\n  function displayBoardState(boardState) {\n    boardStateDisplay.innerHTML = \"\";\n    for (let row = 0; row < 8; row++) {\n      const rowDiv = document.createElement(\"div\");\n      for (let col = 0; col < 8; col++) {\n        const piece = document.createElement(\"span\");\n        piece.textContent = boardState[row][col] || \"-\";\n        rowDiv.appendChild(piece);\n      }\n      boardStateDisplay.appendChild(rowDiv);\n    }\n  }\n\n  function highlightPossibleMoves(piece, start) {\n    const possibleMoves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const end = [row, col];\n        let isValidMove = false;\n        switch (piece.substring(1).toLowerCase()) {\n          case \"p\":\n            isValidMove = pawnRules(piece, start, end);\n            break;\n          case \"r\":\n            isValidMove = rookRules(start, end);\n            break;\n          case \"n\":\n            isValidMove = knightRules(start, end);\n            break;\n          case \"b\":\n            isValidMove = bishopRules(start, end);\n            break;\n          case \"q\":\n            isValidMove = queenRules(start, end);\n            break;\n          case \"k\":\n            isValidMove = kingRules(start, end) && !isKingInCheck(boardState, piece[0] === 'w' ? 'white' : 'black', end);\n            break;\n          default:\n            break;\n        }\n        if (\n          isValidMove &&\n          (!boardState[row][col] || boardState[row][col][0] !== piece[0])\n        ) {\n          const tempBoardState = JSON.parse(JSON.stringify(boardState));\n          tempBoardState[end[0]][end[1]] = piece;\n          tempBoardState[start[0]][start[1]] = \"\";\n          if (!isKingInCheck(tempBoardState, piece[0] === 'w' ? 'white' : 'black')) {\n            possibleMoves.push(end);\n          }\n        }\n      }\n    }\n    possibleMoves.forEach(([row, col]) => {\n      const square = document.getElementById(`square-${row}-${col}`);\n      square.classList.add(\"highlight\");\n    });\n  }\n\n  function pawnRules(piece, start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (piece === \"wp\") {\n      if (firstMove[\"wp\"][startCol] === startRow) {\n        if (endRow === startRow - 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow + 1][endCol]) {\n          enPassantTarget = [endRow + 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      } else {\n        return (\n          (endRow === startRow - 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"b\")) ||\n          (endRow === startRow - 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow + 1][endCol] === \"bp\")\n        );\n      }\n    } else if (piece === \"bp\") {\n      if (firstMove[\"bp\"][startCol] === startRow) {\n        if (endRow === startRow + 2 && startCol === endCol && !boardState[endRow][endCol] && !boardState[endRow - 1][endCol]) {\n          enPassantTarget = [endRow - 1, endCol];\n          return true;\n        }\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      } else {\n        return (\n          (endRow === startRow + 1 &&\n            startCol === endCol &&\n            !boardState[endRow][endCol]) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            boardState[endRow][endCol] &&\n            boardState[endRow][endCol].startsWith(\"w\")) ||\n          (endRow === startRow + 1 &&\n            Math.abs(startCol - endCol) === 1 &&\n            enPassantTarget &&\n            enPassantTarget[0] === endRow &&\n            enPassantTarget[1] === endCol &&\n            boardState[endRow - 1][endCol] === \"wp\")\n        );\n      }\n    }\n    return false;\n  }\n\n  function rookRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (\n        let i = Math.min(startCol, endCol) + 1;\n        i < Math.max(startCol, endCol);\n        i++\n      ) {\n        if (boardState[startRow][i]) {\n          return false;\n        }\n      }\n      return true;\n    } else if (startCol === endCol) {\n      for (\n        let i = Math.min(startRow, endRow) + 1;\n        i < Math.max(startRow, endRow);\n        i++\n      ) {\n        if (boardState[i][startCol]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function knightRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const rowDifference = Math.abs(startRow - endRow);\n    const colDifference = Math.abs(startCol - endCol);\n    return (\n      (rowDifference === 2 && colDifference === 1) ||\n      (rowDifference === 1 && colDifference === 2)\n    );\n  }\n\n  function bishopRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow || 1);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol || 1);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        if (boardState[r][c]) {\n          return false;\n        }\n        r += rowDirection;\n        c += colDirection;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  function queenRules(start, end) {\n    return rookRules(start, end) || bishopRules(start, end);\n  }\n\n  function kingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  function castlingRules(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const rookCol = endCol > startCol ? 7 : 0;\n    const rook = boardState[startRow][rookCol];\n\n    if (\n      startRow !== endRow ||\n      Math.abs(startCol - endCol) !== 2 ||\n      kingMoves[player] > 0 ||\n      rookMoves[player + \"r\"][rookCol === 7 ? 1 : 0] > 0 ||\n      isKingInCheck(boardState, currentPlayer)\n    ) {\n      return false;\n    }\n    const direction = startCol < endCol ? 1 : -1;\n    for (let i = startCol + direction; i !== endCol; i += direction) {\n      if (boardState[startRow][i] || isSquareUnderAttack([startRow, i], player)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquareUnderAttack(square, player) {\n    const [row, col] = square;\n    const opponent = player === \"w\" ? \"b\" : \"w\";\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && piece[0] === opponent) {\n          if (canPieceAttackKing(piece, [r, c], square, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function isKingInCheck(tempBoardState, player, kingPosition = null) {\n    if (!kingPosition) {\n      kingPosition = findKingPosition(tempBoardState, player);\n    }\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = tempBoardState[row][col];\n        if (piece && piece[0] !== player[0]) {\n          if (canPieceAttackKing(piece, [row, col], kingPosition, tempBoardState)) {\n            highlightCheckPath([row, col], kingPosition);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findKingPosition(tempBoardState, player) {\n    const kingChar = player === \"white\" ? \"wk\" : \"bk\";\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoardState[row][col] === kingChar) {\n          return [row, col];\n        }\n      }\n    }\n    return null;\n  }\n\n  function canPieceAttackKing(piece, start, kingPosition, tempBoardState) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, kingPosition);\n      case \"r\":\n        return rookRules(start, kingPosition);\n      case \"n\":\n        return knightRules(start, kingPosition);\n      case \"b\":\n        return bishopRules(start, kingPosition);\n      case \"q\":\n        return queenRules(start, kingPosition);\n      case \"k\":\n        return kingRules(start, kingPosition);\n      default:\n        return false;\n    }\n  }\n\n  function highlightCheckPath(start, end) {\n    const [startRow, startCol] = start;\n    const [endRow, endCol] = end;\n    if (startRow === endRow) {\n      for (let col = Math.min(startCol, endCol) + 1; col < Math.max(startCol, endCol); col++) {\n        document.getElementById(`square-${startRow}-${col}`).classList.add(\"check-highlight\");\n      }\n    } else if (startCol === endCol) {\n      for (let row = Math.min(startRow, endRow) + 1; row < Math.max(startRow, endRow); row++) {\n        document.getElementById(`square-${row}-${startCol}`).classList.add(\"check-highlight\");\n      }\n    } else if (Math.abs(startRow - endRow) === Math.abs(startCol - endCol)) {\n      const rowDirection = (endRow - startRow) / Math.abs(endRow - startRow);\n      const colDirection = (endCol - startCol) / Math.abs(endCol - startCol);\n      let r = startRow + rowDirection,\n        c = startCol + colDirection;\n      while (r !== endRow || c !== endCol) {\n        document.getElementById(`square-${r}-${c}`).classList.add(\"check-highlight\");\n        r += rowDirection;\n        c += colDirection;\n      }\n    }\n  }\n\n  function selectSquare() {\n    if (gamePaused) {\n      return;\n    }\n    const coordStr = this.id.split(\"-\").slice(1);\n    const coords = coordStr.map((str) => parseInt(str));\n    const [row, col] = coords;\n    const piece = this.textContent;\n\n    if (selectedPiece) {\n      if (piece && selectedPiece === piece) {\n        return;\n      }\n      const highlightedSquares = Array.from(document.querySelectorAll('.highlight, .check-highlight'));\n      const isHighlighted = highlightedSquares.some(square => square.id === `square-${row}-${col}`);\n      if (!isHighlighted) {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        return;\n      }\n      let isValidMove = false;\n      switch (selectedPiece.substring(1).toLowerCase()) {\n        case \"p\":\n          isValidMove = pawnRules(selectedPiece, selectedSquare, coords);\n          break;\n        case \"r\":\n          isValidMove = rookRules(selectedSquare, coords);\n          break;\n        case \"n\":\n          isValidMove = knightRules(selectedSquare, coords);\n          break;\n        case \"b\":\n          isValidMove = bishopRules(selectedSquare, coords);\n          break;\n        case \"q\":\n          isValidMove = queenRules(selectedSquare, coords);\n          break;\n        case \"k\":\n          isValidMove = kingRules(selectedSquare, coords) || castlingRules(selectedSquare, coords);\n          break;\n        default:\n          break;\n      }\n      if (isValidMove) {\n        const previousBoardState = JSON.parse(JSON.stringify(boardState));\n        if (piece && piece.substring(0, 1) !== selectedPiece.substring(0, 1)) {\n          score++;\n          scoreBoard.textContent = score;\n        }\n        boardState[selectedSquare[0]][selectedSquare[1]] = \"\";\n        if (selectedPiece === \"wp\" && row === 0) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        } else if (selectedPiece === \"bp\" && row === 7) {\n          selectedSquare = coords;\n          promotionMenu.style.display = \"block\";\n          return;\n        }\n        boardState[row][col] = selectedPiece;\n        if (selectedPiece[1] === \"k\") {\n          kingMoves[selectedPiece[0]]++;\n          if (Math.abs(selectedSquare[1] - col) === 2) {\n            if (col > selectedSquare[1]) {\n              boardState[row][col - 1] = boardState[row][7];\n              boardState[row][7] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][1]++;\n            } else {\n              boardState[row][col + 1] = boardState[row][0];\n              boardState[row][0] = \"\";\n              rookMoves[selectedPiece[0] + \"r\"][0]++;\n            }\n          }\n        }\n        if (selectedPiece[1] === \"r\") {\n          if (selectedSquare[1] === 0) {\n            rookMoves[selectedPiece[0] + \"r\"][0]++;\n          } else if (selectedSquare[1] === 7) {\n            rookMoves[selectedPiece[0] + \"r\"][1]++;\n          }\n        }\n        if (selectedPiece[1] === \"p\" && enPassantTarget && enPassantTarget[0] === row && enPassantTarget[1] === col) {\n          boardState[selectedSquare[0]][col] = \"\";\n        }\n        if (isKingInCheck(boardState, currentPlayer)) {\n          boardState = previousBoardState;\n        } else {\n          currentPlayer = currentPlayer === \"white\" ? \"black\" : \"white\";\n          checkForCheckmate();\n        }\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n        displayBoardState(boardState);\n      } else {\n        selectedPiece = null;\n        selectedSquare = null;\n        drawChessBoard(boardState);\n      }\n    } else if (\n      piece &&\n      ((currentPlayer === \"white\" && piece.startsWith(\"w\")) ||\n        (currentPlayer === \"black\" && piece.startsWith(\"b\")))\n    ) {\n      selectedPiece = piece;\n      selectedSquare = coords;\n      this.classList.add(\"selected\");\n      highlightPossibleMoves(selectedPiece, selectedSquare);\n    }\n  }\n\n  function isValidMove(piece, start, end) {\n    switch (piece.substring(1).toLowerCase()) {\n      case \"p\":\n        return pawnRules(piece, start, end);\n      case \"r\":\n        return rookRules(start, end);\n      case \"n\":\n        return knightRules(start, end);\n      case \"b\":\n        return bishopRules(start, end);\n      case \"q\":\n        return queenRules(start, end);\n      case \"k\":\n        return kingRules(start, end) || castlingRules(start, end);\n      default:\n        return false;\n    }\n  }\n\n  function checkForCheckmate() {\n    const player = currentPlayer === \"white\" ? \"w\" : \"b\";\n    const opponent = currentPlayer === \"white\" ? \"b\" : \"w\";\n    let hasMoves = false;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && piece[0] === player) {\n          const start = [row, col];\n          for (let r = 0; r < 8; r++) {\n            for (let c = 0; c < 8; c++) {\n              const end = [r, c];\n              if (isValidMove(piece, start, end)) {\n                const tempBoardState = JSON.parse(JSON.stringify(boardState));\n                tempBoardState[end[0]][end[1]] = piece;\n                tempBoardState[start[0]][start[1]] = \"\";\n                if (!isKingInCheck(tempBoardState, currentPlayer)) {\n                  hasMoves = true;\n                  break;\n                }\n              }\n            }\n            if (hasMoves) break;\n          }\n        }\n        if (hasMoves) break;\n      }\n      if (hasMoves) break;\n    }\n    if (!hasMoves && isKingInCheck(boardState, currentPlayer)) {\n      alert(`${opponent === \"w\" ? \"White\" : \"Black\"} wins by checkmate!`);\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    } else if (!hasMoves) {\n      alert(\"Stalemate!\");\n      gameStarted = false;\n      startGameBtn.style.display = \"inline\";\n      pauseGameBtn.style.display = \"none\";\n    }\n  }\n};"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  document.getElementById('score').innerText = 0;\n  // Initialize game logic\n  createBalloonPath();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameRunning = true;\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.style.position = 'absolute';\n  balloon.style.width = '20px';\n  balloon.style.height = '20px';\n  balloon.style.backgroundColor = 'red';\n  document.getElementById('gameArea').appendChild(balloon);\n\n  function moveBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(moveBalloon, 1000);\n    } else {\n      index = 0;\n      setTimeout(moveBalloon, 1000);\n    }\n  }\n\n  moveBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: blue;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  document.getElementById('score').innerText = 0;\n  createBalloonPath();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameRunning = true;\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  path.forEach(point => {\n    const pathPoint = document.createElement('div');\n    pathPoint.className = 'path';\n    pathPoint.style.left = point.x + 'px';\n    pathPoint.style.top = point.y + 'px';\n    gameArea.appendChild(pathPoint);\n  });\n\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  gameArea.appendChild(balloon);\n\n  function moveBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(moveBalloon, 1000);\n    } else {\n      index = 0;\n      setTimeout(moveBalloon, 1000);\n    }\n  }\n\n  moveBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: blue;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  document.getElementById('score').innerText = 0;\n  createBalloonPath();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameRunning = true;\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  path.forEach(point => {\n    const pathPoint = document.createElement('div');\n    pathPoint.className = 'path';\n    pathPoint.style.left = point.x + 'px';\n    pathPoint.style.top = point.y + 'px';\n    gameArea.appendChild(pathPoint);\n  });\n\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  gameArea.appendChild(balloon);\n\n  function moveBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(moveBalloon, 1000);\n    } else {\n      index = 0;\n      setTimeout(moveBalloon, 1000);\n    }\n  }\n\n  moveBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: blue;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  document.getElementById('score').innerText = 0;\n  createBalloonPath();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameRunning = true;\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  path.forEach(point => {\n    const pathPoint = document.createElement('div');\n    pathPoint.className = 'path';\n    pathPoint.style.left = point.x + 'px';\n    pathPoint.style.top = point.y + 'px';\n    gameArea.appendChild(pathPoint);\n  });\n\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  gameArea.appendChild(balloon);\n\n  function moveBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(moveBalloon, 1000);\n    } else {\n      index = 0;\n      setTimeout(moveBalloon, 1000);\n    }\n  }\n\n  moveBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: blue;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  document.getElementById('score').innerText = 0;\n  createBalloonPath();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameRunning = true;\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  path.forEach(point => {\n    const pathPoint = document.createElement('div');\n    pathPoint.className = 'path';\n    pathPoint.style.left = point.x + 'px';\n    pathPoint.style.top = point.y + 'px';\n    gameArea.appendChild(pathPoint);\n  });\n\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  gameArea.appendChild(balloon);\n\n  function moveBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(moveBalloon, 1000);\n    } else {\n      gameRunning = false;\n    }\n  }\n\n  moveBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: blue;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\nlet score = 0;\nlet balloonInterval;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  document.getElementById('score').innerText = score;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 2000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1000);\n    } else {\n      gameArea.removeChild(balloon);\n      score++;\n      document.getElementById('score').innerText = score;\n    }\n  }\n\n  animateBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet balloonInterval;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 2000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1000);\n    } else {\n      gameArea.removeChild(balloon);\n      score++;\n      document.getElementById('score').innerText = score;\n      if (index >= path.length) {\n        health--;\n        document.getElementById('health').innerText = health;\n        if (health <= 0) {\n          alert('Game Over!');\n          gameRunning = false;\n          clearInterval(balloonInterval);\n        }\n      }\n    }\n  }\n\n  animateBalloon();\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeTowerButton\">Place Tower</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeTowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeTowerButton {\n  top: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 3;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeTowerButton').addEventListener('click', placeTower);\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000); // Slower spawn rate\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3; // Balloons have more health\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500); // Slower movement\n    } else {\n      gameArea.removeChild(balloon);\n      health -= 5; // Balloons deal more damage\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over!');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower() {\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.style.left = '300px'; // Example position\n  tower.style.top = '200px'; // Example position\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  towerShoot(tower);\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) { // Tower range\n        balloon.health--;\n        if (balloon.health <= 0) {\n          balloon.parentNode.removeChild(balloon);\n          score += 10;\n          document.getElementById('score').innerText = score;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeTowerButton\">Place Tower</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeTowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeTowerButton {\n  top: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 3;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeTowerButton').addEventListener('click', placeTower);\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000); // Slower spawn rate\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3; // Balloons have more health\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500); // Slower movement\n    } else {\n      gameArea.removeChild(balloon);\n      health -= 5; // Balloons deal more damage\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over!');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower() {\n  if (currentTower) return; // Prevent placing multiple towers at once\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.style.left = '300px'; // Example position\n  tower.style.top = '200px'; // Example position\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  tower.addEventListener('mousedown', dragStart);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n  });\n}\n\nfunction dragStart(e) {\n  const tower = e.target;\n  tower.classList.add('dragging');\n  const shiftX = e.clientX - tower.getBoundingClientRect().left;\n  const shiftY = e.clientY - tower.getBoundingClientRect().top;\n\n  function moveAt(pageX, pageY) {\n    tower.style.left = pageX - shiftX + 'px';\n    tower.style.top = pageY - shiftY + 'px';\n  }\n\n  function onMouseMove(event) {\n    moveAt(event.pageX, event.pageY);\n  }\n\n  document.addEventListener('mousemove', onMouseMove);\n\n  tower.onmouseup = function() {\n    document.removeEventListener('mousemove', onMouseMove);\n    tower.onmouseup = null;\n  };\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) { // Tower range\n        balloon.health--;\n        if (balloon.health <= 0) {\n          balloon.parentNode.removeChild(balloon);\n          score += 10;\n          document.getElementById('score').innerText = score;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeTowerButton\">Place Tower</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeTowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeTowerButton {\n  top: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 3;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeTowerButton').addEventListener('click', placeTower);\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000); // Slower spawn rate\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3; // Balloons have more health\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500); // Slower movement\n    } else {\n      gameArea.removeChild(balloon);\n      health -= 5; // Balloons deal more damage\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over!');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower() {\n  if (currentTower) return; // Prevent placing multiple towers at once\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.style.left = '300px'; // Example position\n  tower.style.top = '200px'; // Example position\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  tower.addEventListener('mousedown', dragStart);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n  });\n}\n\nfunction dragStart(e) {\n  const tower = e.target;\n  tower.classList.add('dragging');\n  const shiftX = e.clientX - tower.getBoundingClientRect().left;\n  const shiftY = e.clientY - tower.getBoundingClientRect().top;\n\n  function moveAt(pageX, pageY) {\n    tower.style.left = pageX - shiftX + 'px';\n    tower.style.top = pageY - shiftY + 'px';\n  }\n\n  function onMouseMove(event) {\n    moveAt(event.pageX, event.pageY);\n  }\n\n  document.addEventListener('mousemove', onMouseMove);\n\n  tower.onmouseup = function() {\n    document.removeEventListener('mousemove', onMouseMove);\n    tower.onmouseup = null;\n  };\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) { // Tower range\n        balloon.health--;\n        if (balloon.health <= 0) {\n          balloon.parentNode.removeChild(balloon);\n          score += 10;\n          document.getElementById('score').innerText = score;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 3;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile'));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow'));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe'));\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; // Clear previous game elements\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000); // Slower spawn rate\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3; // Balloons have more health\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500); // Slower movement\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5; // Balloons deal more damage\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over!');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type) {\n  if (currentTower) return; // Prevent placing multiple towers at once\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.style.left = '300px'; // Example position\n  tower.style.top = '200px'; // Example position\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  tower.addEventListener('mousedown', dragStart);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n  });\n}\n\nfunction dragStart(e) {\n  const tower = e.target;\n  tower.classList.add('dragging');\n  const shiftX = e.clientX - tower.getBoundingClientRect().left;\n  const shiftY = e.clientY - tower.getBoundingClientRect().top;\n\n  function moveAt(pageX, pageY) {\n    tower.style.left = pageX - shiftX + 'px';\n    tower.style.top = pageY - shiftY + 'px';\n  }\n\n  function onMouseMove(event) {\n    moveAt(event.pageX, event.pageY);\n  }\n\n  document.addEventListener('mousemove', onMouseMove);\n\n  tower.onmouseup = function() {\n    document.removeEventListener('mousemove', onMouseMove);\n    tower.onmouseup = null;\n  };\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) { // Tower range\n        if (tower.dataset.type === 'projectile') {\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear'; // Slow effect\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5; // AoE effect\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          score += 10;\n          document.getElementById('score').innerText = score;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span> | Money: <span id=\"money\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 3;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet money = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  money = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  document.getElementById('money').innerText = money;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over!');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (currentTower || money < cost) return;\n  money -= cost;\n  document.getElementById('money').innerText = money;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  tower.addEventListener('mousedown', dragStart);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n  });\n}\n\nfunction dragStart(e) {\n  const tower = e.target;\n  tower.classList.add('dragging');\n  const shiftX = e.clientX - tower.getBoundingClientRect().left;\n  const shiftY = e.clientY - tower.getBoundingClientRect().top;\n\n  function moveAt(pageX, pageY) {\n    tower.style.left = pageX - shiftX + 'px';\n    tower.style.top = pageY - shiftY + 'px';\n  }\n\n  function onMouseMove(event) {\n    moveAt(event.pageX, event.pageY);\n  }\n\n  document.addEventListener('mousemove', onMouseMove);\n\n  tower.onmouseup = function() {\n    document.removeEventListener('mousemove', onMouseMove);\n    tower.onmouseup = null;\n  };\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          score += 10;\n          document.getElementById('score').innerText = score;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span> | Health: <span id=\"health\">100</span> | Money: <span id=\"money\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 3;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet score = 0;\nlet health = 100;\nlet money = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  score = 0;\n  health = 100;\n  money = 100;\n  document.getElementById('score').innerText = score;\n  document.getElementById('health').innerText = health;\n  document.getElementById('money').innerText = money;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (money < cost) return;\n  money -= cost;\n  document.getElementById('money').innerText = money;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          score += 10;\n          document.getElementById('score').innerText = score;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 3;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2; // Lowered health for easier destruction\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n        }\n      }\n    }\n  }, 1000);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 5px;\n  height: 5px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, 3000);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n        }\n      }\n    }\n  }, 1000);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  projectile.style.left = towerRect.left + 12.5 + 'px';\n  projectile.style.top = towerRect.top + 12.5 + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  setTimeout(() => {\n    const balloonRect = balloon.getBoundingClientRect();\n    const distanceX = balloonRect.left - towerRect.left;\n    const distanceY = balloonRect.top - towerRect.top;\n    projectile.style.left = balloonRect.left + 'px';\n    projectile.style.top = balloonRect.top + 'px';\n\n    setTimeout(() => {\n      if (projectile.parentNode) {\n        projectile.parentNode.removeChild(projectile);\n      }\n    }, 500);\n  }, 100);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n        }\n      }\n    }\n  }, 1000);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  projectile.style.left = towerRect.left + 12.5 + 'px';\n  projectile.style.top = towerRect.top + 12.5 + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  setTimeout(() => {\n    const balloonRect = balloon.getBoundingClientRect();\n    projectile.style.left = balloonRect.left + 'px';\n    projectile.style.top = balloonRect.top + 'px';\n\n    setTimeout(() => {\n      if (projectile.parentNode) {\n        projectile.parentNode.removeChild(projectile);\n      }\n    }, 500);\n  }, 100);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.3s linear, top 0.3s linear;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n        }\n      }\n    }\n  }, 500);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  projectile.style.left = towerRect.left + 7.5 + 'px';\n  projectile.style.top = towerRect.top + 7.5 + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  setTimeout(() => {\n    const balloonRect = balloon.getBoundingClientRect();\n    projectile.style.left = balloonRect.left + 'px';\n    projectile.style.top = balloonRect.top + 'px';\n\n    setTimeout(() => {\n      if (projectile.parentNode) {\n        projectile.parentNode.removeChild(projectile);\n      }\n    }, 300);\n  }, 100);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  projectile.style.left = towerRect.left + 'px';\n  projectile.style.top = towerRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  setTimeout(() => {\n    const balloonRect = balloon.getBoundingClientRect();\n    projectile.style.left = balloonRect.left + 'px';\n    projectile.style.top = balloonRect.top + 'px';\n\n    setTimeout(() => {\n      if (projectile.parentNode) {\n        projectile.parentNode.removeChild(projectile);\n      }\n    }, 500);\n  }, 100);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 90px;\n}\n\n#placeSlowTowerButton {\n  top: 130px;\n}\n\n#placeAoETowerButton {\n  top: 170px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  setTimeout(() => {\n    const balloonRect = balloon.getBoundingClientRect();\n    projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n    projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n    setTimeout(() => {\n      if (projectile.parentNode) {\n        projectile.parentNode.removeChild(projectile);\n      }\n    }, 500);\n  }, 100);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500);\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000; // Adjust speed\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level)); // Adjust speed\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000; // Adjust speed\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level)); // Adjust speed\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          if (distance < 100) {\n            balloon.style.transition = 'left 2s linear, top 2s linear';\n          }\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe') {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000; // Adjust speed\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level)); // Adjust speed\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      health -= 5 + level;\n      document.getElementById('health').innerText = health;\n      if (health <= 0) {\n        alert('Game Over! Click Start to play again.');\n        gameRunning = false;\n        clearInterval(balloonInterval);\n      }\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          if (distance < 100) {\n            balloon.style.transition = 'left 2s linear, top 2s linear';\n          }\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) { // Adjust AoE range\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000; // Adjust speed\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n  <div id=\"endTower\" class=\"tower\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}\n\n#endTower {\n  width: 50px;\n  height: 50px;\n  background-color: darkgreen;\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  z-index: 7;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level)); // Adjust speed\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      checkEndTowerHit(balloon);\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction checkEndTowerHit(balloon) {\n  const endTower = document.getElementById('endTower');\n  const balloonRect = balloon.getBoundingClientRect();\n  const endTowerRect = endTower.getBoundingClientRect();\n  const distance = Math.hypot(balloonRect.x - endTowerRect.x, balloonRect.y - endTowerRect.y);\n\n  if (distance < 50) { // Adjust range for end tower\n    health -= 5 + level;\n    document.getElementById('health').innerText = health;\n    if (health <= 0) {\n      alert('Game Over! Click Start to play again.');\n      gameRunning = false;\n      clearInterval(balloonInterval);\n    }\n  }\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          if (distance < 100) {\n            balloon.style.transition = 'left 2s linear, top 2s linear';\n          }\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) { // Adjust AoE range\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000; // Adjust speed\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n  <div id=\"endTower\" class=\"tower\" style=\"left: 800px; top: 100px;\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}\n\n#endTower {\n  width: 50px;\n  height: 50px;\n  background-color: darkgreen;\n  position: absolute;\n  z-index: 7;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level)); // Adjust speed\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      checkEndTowerHit(balloon);\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction checkEndTowerHit(balloon) {\n  const endTower = document.getElementById('endTower');\n  const balloonRect = balloon.getBoundingClientRect();\n  const endTowerRect = endTower.getBoundingClientRect();\n  const distance = Math.hypot(balloonRect.x - endTowerRect.x, balloonRect.y - endTowerRect.y);\n\n  if (distance < 50) { // Adjust range for end tower\n    health -= 5 + level;\n    document.getElementById('health').innerText = health;\n    if (health <= 0) {\n      alert('Game Over! Click Start to play again.');\n      gameRunning = false;\n      clearInterval(balloonInterval);\n    }\n  }\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          if (distance < 100) {\n            balloon.style.transition = 'left 2s linear, top 2s linear';\n          }\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) { // Adjust AoE range\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000; // Adjust speed\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n  <div id=\"endTower\" class=\"tower\" style=\"left: 750px; top: 100px;\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}\n\n#endTower {\n  width: 50px;\n  height: 50px;\n  background-color: darkgreen;\n  position: absolute;\n  z-index: 7;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level));\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      checkEndTowerHit(balloon);\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction checkEndTowerHit(balloon) {\n  const endTower = document.getElementById('endTower');\n  const balloonRect = balloon.getBoundingClientRect();\n  const endTowerRect = endTower.getBoundingClientRect();\n  const distance = Math.hypot(balloonRect.x - endTowerRect.x, balloonRect.y - endTowerRect.y);\n\n  if (distance < 50) {\n    health -= 5 + level;\n    document.getElementById('health').innerText = health;\n    if (health <= 0) {\n      alert('Game Over! Click Start to play again.');\n      gameRunning = false;\n      clearInterval(balloonInterval);\n    }\n  }\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          if (distance < 100) {\n            balloon.style.transition = 'left 2s linear, top 2s linear';\n          }\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000;\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n  <div id=\"endTower\" class=\"tower\" style=\"left: 750px; top: 100px;\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}\n\n#endTower {\n  width: 50px;\n  height: 50px;\n  background-color: darkgreen;\n  position: absolute;\n  z-index: 7;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 - (level * 200);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level));\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      checkEndTowerHit(balloon);\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction checkEndTowerHit(balloon) {\n  const endTower = document.getElementById('endTower');\n  const balloonRect = balloon.getBoundingClientRect();\n  const endTowerRect = endTower.getBoundingClientRect();\n  const distance = Math.hypot(balloonRect.x - endTowerRect.x, balloonRect.y - endTowerRect.y);\n\n  if (distance < 50) {\n    health -= 5 + level;\n    document.getElementById('health').innerText = health;\n    if (health <= 0) {\n      alert('Game Over! Click Start to play again.');\n      gameRunning = false;\n      clearInterval(balloonInterval);\n    }\n  }\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          if (distance < 100) {\n            balloon.style.transition = 'left 2s linear, top 2s linear';\n          }\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000;\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n  <div id=\"endTower\" class=\"tower\" style=\"left: 750px; top: 100px;\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}\n\n#endTower {\n  width: 50px;\n  height: 50px;\n  background-color: darkgreen;\n  position: absolute;\n  z-index: 7;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = Math.max(1000, 3000 - (level * 200));\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level));\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      checkEndTowerHit(balloon);\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction checkEndTowerHit(balloon) {\n  const endTower = document.getElementById('endTower');\n  const balloonRect = balloon.getBoundingClientRect();\n  const endTowerRect = endTower.getBoundingClientRect();\n  const distance = Math.hypot(balloonRect.x - endTowerRect.x, balloonRect.y - endTowerRect.y);\n\n  if (distance < 50) {\n    health -= 5 + level;\n    document.getElementById('health').innerText = health;\n    if (health <= 0) {\n      alert('Game Over! Click Start to play again.');\n      gameRunning = false;\n      clearInterval(balloonInterval);\n    }\n  }\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n            if (level % 5 === 0) {\n              scoreMoney += 50;\n              document.getElementById('scoreMoney').innerText = scoreMoney;\n            }\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000;\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "Tower Defense",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score & Money: <span id=\"scoreMoney\">100</span> | Health: <span id=\"health\">100</span> | Level: <span id=\"level\">1</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved balloon path with multiple turns.</li>\n      <li>Bug fixes and performance improvements.</li>\n      <li>New defense towers added.</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"gameArea\"></div>\n  <div id=\"towerArea\">\n    <button id=\"placeProjectileTowerButton\">Place Projectile Tower (Cost: 20)</button>\n    <button id=\"placeSlowTowerButton\">Place Slow Tower (Cost: 30)</button>\n    <button id=\"placeAoETowerButton\">Place AoE Tower (Cost: 40)</button>\n  </div>\n  <div id=\"endTower\" class=\"tower\" style=\"left: 750px; top: 100px;\"></div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n\n#startButton, #updateButton, #placeProjectileTowerButton, #placeSlowTowerButton, #placeAoETowerButton {\n  position: absolute;\n  top: 550px;\n  left: 10px;\n  margin-right: 10px;\n  z-index: 10;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#placeProjectileTowerButton {\n  top: 590px;\n}\n\n#placeSlowTowerButton {\n  top: 630px;\n}\n\n#placeAoETowerButton {\n  top: 670px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 300px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 100;\n}\n\n.path {\n  position: absolute;\n  background-color: blue;\n  border: 1px solid black;\n  z-index: 2;\n  opacity: 0.3;\n}\n\n.balloon {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: red;\n  transition: left 1s linear, top 1s linear;\n  z-index: 3;\n}\n\n.tower {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: green;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.tower.dragging {\n  opacity: 0.5;\n}\n\n.projectile {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  background-color: black;\n  border-radius: 50%;\n  z-index: 5;\n  transition: left 0.5s linear, top 0.5s linear;\n}\n\n.damage-indicator {\n  position: absolute;\n  font-size: 12px;\n  color: yellow;\n  z-index: 6;\n  pointer-events: none;\n}\n\n#endTower {\n  width: 50px;\n  height: 50px;\n  background-color: darkgreen;\n  position: absolute;\n  z-index: 7;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', showUpdates);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdates);\ndocument.getElementById('placeProjectileTowerButton').addEventListener('click', () => placeTower('projectile', 20));\ndocument.getElementById('placeSlowTowerButton').addEventListener('click', () => placeTower('slow', 30));\ndocument.getElementById('placeAoETowerButton').addEventListener('click', () => placeTower('aoe', 40));\n\nlet gameRunning = false;\nlet scoreMoney = 100;\nlet health = 100;\nlet balloonInterval;\nlet towers = [];\nlet currentTower = null;\nlet level = 1;\nlet kills = 0;\n\nfunction startGame() {\n  if (gameRunning) return;\n  gameRunning = true;\n  scoreMoney = 100;\n  health = 100;\n  level = 1;\n  kills = 0;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  document.getElementById('health').innerText = health;\n  document.getElementById('level').innerText = level;\n  createBalloonPath();\n  spawnBalloons();\n}\n\nfunction showUpdates() {\n  gameRunning = false;\n  clearInterval(balloonInterval);\n  document.getElementById('updateMenu').style.display = 'block';\n}\n\nfunction closeUpdates() {\n  document.getElementById('updateMenu').style.display = 'none';\n  if (!gameRunning) {\n    gameRunning = true;\n    spawnBalloons();\n  }\n}\n\nfunction createBalloonPath() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = ''; \n\n  for (let i = 0; i < path.length - 1; i++) {\n    const pathLine = document.createElement('div');\n    pathLine.className = 'path';\n    pathLine.style.width = Math.abs(path[i+1].x - path[i].x) + 'px';\n    pathLine.style.height = Math.abs(path[i+1].y - path[i].y) + 'px';\n    pathLine.style.left = Math.min(path[i].x, path[i+1].x) + 'px';\n    pathLine.style.top = Math.min(path[i].y, path[i+1].y) + 'px';\n    gameArea.appendChild(pathLine);\n  }\n}\n\nfunction spawnBalloons() {\n  let spawnRate = 3000 / Math.pow(1.5, level);\n  balloonInterval = setInterval(() => {\n    if (!gameRunning) return;\n    moveBalloon();\n  }, spawnRate);\n}\n\nfunction moveBalloon() {\n  const path = [\n    { x: 0, y: 100 },\n    { x: 200, y: 100 },\n    { x: 200, y: 300 },\n    { x: 400, y: 300 },\n    { x: 400, y: 500 },\n    { x: 600, y: 500 },\n    { x: 600, y: 100 },\n    { x: 800, y: 100 }\n  ];\n  \n  const gameArea = document.getElementById('gameArea');\n  let index = 0;\n  let balloon = document.createElement('div');\n  balloon.className = 'balloon';\n  balloon.health = 2 + level;\n  gameArea.appendChild(balloon);\n\n  function animateBalloon() {\n    if (index < path.length) {\n      balloon.style.left = path[index].x + 'px';\n      balloon.style.top = path[index].y + 'px';\n      index++;\n      setTimeout(animateBalloon, 1500 * Math.pow(0.7, level));\n    } else {\n      if (balloon.parentNode) {\n        balloon.parentNode.removeChild(balloon);\n      }\n      checkEndTowerHit(balloon);\n    }\n  }\n\n  animateBalloon();\n}\n\nfunction checkEndTowerHit(balloon) {\n  const endTower = document.getElementById('endTower');\n  const balloonRect = balloon.getBoundingClientRect();\n  const endTowerRect = endTower.getBoundingClientRect();\n  const distance = Math.hypot(balloonRect.x - endTowerRect.x, balloonRect.y - endTowerRect.y);\n\n  if (distance < 50) {\n    health -= 5 + level;\n    document.getElementById('health').innerText = health;\n    if (health <= 0) {\n      alert('Game Over! Click Start to play again.');\n      gameRunning = false;\n      clearInterval(balloonInterval);\n    }\n  }\n}\n\nfunction placeTower(type, cost) {\n  if (scoreMoney < cost) return;\n  scoreMoney -= cost;\n  document.getElementById('scoreMoney').innerText = scoreMoney;\n  const gameArea = document.getElementById('gameArea');\n  const tower = document.createElement('div');\n  tower.className = 'tower';\n  tower.dataset.type = type;\n  gameArea.appendChild(tower);\n  towers.push(tower);\n  currentTower = tower;\n\n  document.addEventListener('mousemove', dragTower);\n  tower.addEventListener('dblclick', () => {\n    tower.classList.remove('dragging');\n    towerShoot(tower);\n    currentTower = null;\n    document.removeEventListener('mousemove', dragTower);\n  });\n\n  function dragTower(event) {\n    if (currentTower) {\n      const rect = gameArea.getBoundingClientRect();\n      currentTower.style.left = event.clientX - rect.left - 15 + 'px';\n      currentTower.style.top = event.clientY - rect.top - 15 + 'px';\n    }\n  }\n}\n\nfunction towerShoot(tower) {\n  setInterval(() => {\n    if (!gameRunning) return;\n    const balloons = document.getElementsByClassName('balloon');\n    for (let balloon of balloons) {\n      const balloonRect = balloon.getBoundingClientRect();\n      const towerRect = tower.getBoundingClientRect();\n      const distance = Math.hypot(balloonRect.x - towerRect.x, balloonRect.y - towerRect.y);\n      if (distance < 100) {\n        if (tower.dataset.type === 'projectile') {\n          createProjectile(tower, balloon);\n          balloon.health--;\n          showDamage(balloon, 1);\n        } else if (tower.dataset.type === 'slow') {\n          balloon.style.transition = 'left 2s linear, top 2s linear';\n          showDamage(balloon, 0);\n        } else if (tower.dataset.type === 'aoe' && distance < 50) {\n          balloon.health -= 0.5;\n          showDamage(balloon, 0.5);\n        }\n\n        if (balloon.health <= 0) {\n          if (balloon.parentNode) {\n            balloon.parentNode.removeChild(balloon);\n          }\n          scoreMoney += 10 + level;\n          document.getElementById('scoreMoney').innerText = scoreMoney;\n          kills++;\n          if (kills % 25 === 0) {\n            level++;\n            document.getElementById('level').innerText = level;\n            if (level % 5 === 0) {\n              scoreMoney += 50;\n              document.getElementById('scoreMoney').innerText = scoreMoney;\n            }\n          }\n        }\n      }\n    }\n  }, 100);\n}\n\nfunction createProjectile(tower, balloon) {\n  const projectile = document.createElement('div');\n  projectile.className = 'projectile';\n  const towerRect = tower.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  projectile.style.left = towerRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = towerRect.top - gameAreaRect.top + 'px';\n  document.getElementById('gameArea').appendChild(projectile);\n\n  const balloonRect = balloon.getBoundingClientRect();\n  const dx = balloonRect.left - towerRect.left;\n  const dy = balloonRect.top - towerRect.top;\n  const distance = Math.hypot(dx, dy);\n  const duration = distance / 1000;\n\n  projectile.style.transition = `left ${duration}s linear, top ${duration}s linear`;\n  projectile.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  projectile.style.top = balloonRect.top - gameAreaRect.top + 'px';\n\n  setTimeout(() => {\n    if (projectile.parentNode) {\n      projectile.parentNode.removeChild(projectile);\n    }\n  }, duration * 1000);\n}\n\nfunction showDamage(balloon, damage) {\n  const damageIndicator = document.createElement('div');\n  damageIndicator.className = 'damage-indicator';\n  damageIndicator.innerText = `-${damage}`;\n  const balloonRect = balloon.getBoundingClientRect();\n  const gameAreaRect = document.getElementById('gameArea').getBoundingClientRect();\n  damageIndicator.style.left = balloonRect.left - gameAreaRect.left + 'px';\n  damageIndicator.style.top = balloonRect.top - gameAreaRect.top - 20 + 'px';\n  document.getElementById('gameArea').appendChild(damageIndicator);\n\n  setTimeout(() => {\n    if (damageIndicator.parentNode) {\n      damageIndicator.parentNode.removeChild(damageIndicator);\n    }\n  }, 500);\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 200px;\n  left: 350px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  // Add game logic here\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n    <div id=\"person\" class=\"walking\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n}\n\n#person {\n  width: 50px;\n  height: 100px;\n  background-color: blue;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  transition: left 2s linear;\n}\n\n.walking {\n  animation: walk 5s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 750px; }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.addEventListener('keydown', function(event) {\n  if (event.code === 'Space') {\n    dropGuillotine();\n  }\n});\n\nlet score = 0;\nlet gameInterval;\nlet personInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  document.getElementById('person').classList.add('walking');\n  gameInterval = setInterval(checkCollision, 100);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  guillotine.style.top = '400px';\n  setTimeout(() => {\n    guillotine.style.top = '0';\n  }, 500);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const person = document.getElementById('person');\n\n  const guillotineRect = guillotine.getBoundingClientRect();\n  const personRect = person.getBoundingClientRect();\n\n  if (\n    guillotineRect.left < personRect.right &&\n    guillotineRect.right > personRect.left &&\n    guillotineRect.bottom > personRect.top &&\n    guillotineRect.top < personRect.bottom\n  ) {\n    score++;\n    document.getElementById('score').innerText = score;\n    person.style.left = '0';\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n}\n\n.person {\n  width: 50px;\n  height: 100px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 750px; }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  guillotine.style.top = '400px';\n  setTimeout(() => {\n    guillotine.style.top = '0';\n  }, 500);\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      person.remove();\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n}\n\n.person {\n  width: 50px;\n  height: 100px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 750px; }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = '0px';\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      person.remove();\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n}\n\n.person {\n  width: 50px;\n  height: 100px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 750px; }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = '0px';\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      person.remove();\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 50px;\n  height: 100px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 750px; }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = '0px';\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      person.remove();\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 200px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 50px;\n  height: 100px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 20px;\n  height: 20px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -20px;\n  left: 15px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 750px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = '0px';\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n  \n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = '0px';\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n  \n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = '0px';\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n  \n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n\n  if (score >= 100) {\n    clearInterval(gameInterval);\n    clearInterval(spawnInterval);\n    document.getElementById('winScreen').style.display = 'flex';\n  }\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 1000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.5 ? 'blue' : 'red');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1; // Random speed between 1 and 3 seconds\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n\n  if (score >= 100) {\n    clearInterval(gameInterval);\n    clearInterval(spawnInterval);\n    document.getElementById('winScreen').style.display = 'flex';\n  }\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000); // Decreased spawn rate\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue'); // More blues than reds\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1; // Random speed between 1 and 3 seconds\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n\n  if (score >= 100) {\n    clearInterval(gameInterval);\n    clearInterval(spawnInterval);\n    document.getElementById('winScreen').style.display = 'flex';\n  }\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n\n  if (score >= 50) {\n    clearInterval(gameInterval);\n    clearInterval(spawnInterval);\n    document.getElementById('winScreen').style.display = 'flex';\n  }\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n\n  if (score >= 50) {\n    clearInterval(gameInterval);\n    clearInterval(spawnInterval);\n    document.getElementById('winScreen').style.display = 'flex';\n  }\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 3;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n  z-index: 3;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score++;\n      } else {\n        score--;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n\n  if (score >= 50) {\n    clearInterval(gameInterval);\n    clearInterval(spawnInterval);\n    document.getElementById('winScreen').style.display = 'flex';\n  }\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  clip-path: polygon(0 0, 100% 0, 75% 100%, 25% 100%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 80;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 80;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  clip-path: polygon(0 0, 100% 0, 100% 80%, 75% 100%, 25% 100%, 0 80%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 80;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 80;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  clip-path: polygon(0 0, 100% 0, 100% 80%, 50% 100%, 0 80%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 80;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 80;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 80px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 360px;\n  clip-path: polygon(0 0, 100% 0, 100% 60%, 50% 100%, 0 60%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 80;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 80;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  clip-path: polygon(0 0, 100% 0, 100% 60%, 50% 100%, 0 60%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '400px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '400px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  clip-path: polygon(0 0, 100% 0, 100% 60%, 50% 100%, 0 60%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = '420px';\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === '420px' &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  clip-path: polygon(0 0, 100% 0, 80% 100%, 20% 100%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\"></div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  background-color: darkred;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(0 0, 100% 0, 100% 70%, 50% 100%, 0 70%);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: 0;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(15% 0, 85% 0, 100% 100%, 0 100%);\n  transform: rotate(90deg);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '0px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '0';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: -180px;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(15% 0, 85% 0, 100% 100%, 0 100%);\n  transform: rotate(90deg);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '-180px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '-180px';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: -50px;\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(15% 0, 85% 0, 100% 100%, 0 100%);\n  transform: rotate(90deg);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '-50px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '-50px';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: -100px; /* Adjusted starting position */\n  left: 350px;\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(15% 0, 85% 0, 100% 100%, 0 100%);\n  transform: rotate(90deg);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '-100px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '-100px';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: -100px;\n  left: 50%;\n  transform: translateX(-50%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(15% 0, 85% 0, 100% 100%, 0 100%);\n  transform: rotate(90deg);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '-100px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '-100px';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n  \n  const head = document.createElement('div');\n  head.classList.add('head');\n  person.appendChild(head);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n  \n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n    \n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n      \n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n      \n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "French Revolution Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <button id=\"shopButton\">Shop</button>\n  <div id=\"gameArea\">\n    <div id=\"guillotine\">\n      <div id=\"blade\"></div>\n    </div>\n  </div>\n  <div id=\"updateMenu\" style=\"display: none;\">\n    <div id=\"updateContent\">\n      <h2>Game Updates</h2>\n      <ul>\n        <li>Added Guillotine</li>\n        <li>Improved Gameplay Mechanics</li>\n        <li>New Walking Characters</li>\n        <li>Heads Roll Off When Hit</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"shopMenu\" style=\"display: none;\">\n    <div id=\"shopContent\">\n      <h2>Shop</h2>\n      <ul>\n        <li><button id=\"widerBladeButton\">Wider Blade (Cost: 10 points)</button></li>\n        <li><button id=\"doublePointsButton\">Double Points (Cost: 20 points)</button></li>\n        <li><button id=\"halfLossButton\">Half Loss (Cost: 15 points)</button></li>\n      </ul>\n      <button id=\"closeShopButton\">Close</button>\n    </div>\n  </div>\n  <div id=\"winScreen\" style=\"display: none;\">\n    <div id=\"winContent\">\n      <h2>Congratulations!</h2>\n      <p>You Win!</p>\n      <button id=\"restartButton\">Restart Game</button>\n    </div>\n  </div>\n</div>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  z-index: 1;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  z-index: 3;\n}\n\n#startButton, #updateButton, #shopButton {\n  position: absolute;\n  z-index: 3;\n}\n\n#startButton {\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  top: 90px;\n  left: 10px;\n}\n\n#shopButton {\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n#guillotine {\n  width: 100px;\n  height: 180px;\n  position: absolute;\n  top: -100px;\n  left: 50%;\n  transform: translateX(-50%);\n  transition: top 0.5s;\n  z-index: 2;\n}\n\n#blade {\n  width: 100%;\n  height: 100%;\n  background-color: darkred;\n  clip-path: polygon(15% 0, 85% 0, 100% 100%, 0 100%);\n  transform: rotate(90deg);\n}\n\n.person {\n  width: 40px;\n  height: 90px;\n  position: absolute;\n  bottom: 0;\n  transition: left 1.5s linear;\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.head {\n  width: 30px;\n  height: 30px;\n  background-color: white;\n  border-radius: 50%;\n  position: absolute;\n  top: -30px;\n  left: 5px;\n  z-index: 2;\n}\n\n.torso {\n  width: 20px;\n  height: 40px;\n  background-color: inherit;\n  margin-top: 30px;\n}\n\n.legs {\n  width: 20px;\n  height: 20px;\n  background-color: inherit;\n  display: flex;\n  justify-content: space-between;\n}\n\n.leg {\n  width: 8px;\n  height: 20px;\n  background-color: inherit;\n}\n\n.blue {\n  background-color: blue;\n}\n\n.red {\n  background-color: red;\n}\n\n.walking {\n  animation: walk 3s infinite linear;\n}\n\n@keyframes walk {\n  0% { left: 0; }\n  100% { left: 760px; }\n}\n\n@keyframes roll {\n  0% { transform: translateY(0) rotate(0); }\n  100% { transform: translateY(100px) rotate(360deg); }\n}\n\n#updateMenu, #shopMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 4;\n}\n\n#updateContent, #shopContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}\n\n#winScreen {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 5;\n}\n\n#winContent {\n  background-color: black;\n  padding: 20px;\n  border-radius: 5px;\n  text-align: center;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('shopButton').addEventListener('click', openShopMenu);\ndocument.getElementById('closeShopButton').addEventListener('click', closeShopMenu);\ndocument.getElementById('gameArea').addEventListener('click', dropGuillotine);\ndocument.getElementById('restartButton').addEventListener('click', startGame);\ndocument.getElementById('widerBladeButton').addEventListener('click', buyWiderBlade);\ndocument.getElementById('doublePointsButton').addEventListener('click', buyDoublePoints);\ndocument.getElementById('halfLossButton').addEventListener('click', buyHalfLoss);\n\nlet score = 0;\nlet gameInterval;\nlet spawnInterval;\nlet guillotineWidth = 100;\nlet pointMultiplier = 1;\nlet lossMultiplier = 1;\n\nfunction startGame() {\n  score = 0;\n  guillotineWidth = 100;\n  pointMultiplier = 1;\n  lossMultiplier = 1;\n  document.getElementById('score').innerText = score;\n  clearGameArea();\n  document.getElementById('winScreen').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction openShopMenu() {\n  document.getElementById('shopMenu').style.display = 'flex';\n  clearInterval(gameInterval);\n  clearInterval(spawnInterval);\n}\n\nfunction closeShopMenu() {\n  document.getElementById('shopMenu').style.display = 'none';\n  gameInterval = setInterval(checkCollision, 100);\n  spawnInterval = setInterval(spawnPerson, 2000);\n}\n\nfunction dropGuillotine() {\n  const guillotine = document.getElementById('guillotine');\n  const gameWindow = document.getElementById('gameWindow');\n  if (guillotine.style.top === '-100px' || guillotine.style.top === '') {\n    guillotine.style.top = `${gameWindow.clientHeight - guillotine.clientHeight}px`;\n    setTimeout(() => {\n      guillotine.style.top = '-100px';\n    }, 500);\n  }\n}\n\nfunction spawnPerson() {\n  const gameArea = document.getElementById('gameArea');\n  const person = document.createElement('div');\n  person.classList.add('person', 'walking');\n  person.classList.add(Math.random() > 0.7 ? 'red' : 'blue');\n  person.style.left = `${Math.random() * (gameArea.clientWidth - 40)}px`;\n\n  const head = document.createElement('div');\n  head.classList.add('head');\n\n  const torso = document.createElement('div');\n  torso.classList.add('torso');\n\n  const legs = document.createElement('div');\n  legs.classList.add('legs');\n\n  const leg1 = document.createElement('div');\n  leg1.classList.add('leg');\n\n  const leg2 = document.createElement('div');\n  leg2.classList.add('leg');\n\n  legs.appendChild(leg1);\n  legs.appendChild(leg2);\n\n  person.appendChild(head);\n  person.appendChild(torso);\n  person.appendChild(legs);\n\n  const speed = Math.random() * 2 + 1;\n  person.style.animationDuration = `${speed}s`;\n\n  gameArea.appendChild(person);\n}\n\nfunction checkCollision() {\n  const guillotine = document.getElementById('guillotine');\n  const persons = document.querySelectorAll('.person');\n\n  persons.forEach(person => {\n    const guillotineRect = guillotine.getBoundingClientRect();\n    const personRect = person.getBoundingClientRect();\n\n    if (\n      guillotine.style.top === `${document.getElementById('gameWindow').clientHeight - guillotine.clientHeight}px` &&\n      guillotineRect.left < personRect.right &&\n      guillotineRect.right > personRect.left &&\n      guillotineRect.bottom > personRect.top &&\n      guillotineRect.top < personRect.bottom\n    ) {\n      if (person.classList.contains('blue')) {\n        score += 1 * pointMultiplier;\n      } else {\n        score -= 1 * lossMultiplier;\n      }\n      document.getElementById('score').innerText = score;\n\n      const head = person.querySelector('.head');\n      head.style.animation = 'roll 1s forwards';\n\n      setTimeout(() => {\n        person.remove();\n      }, 1000);\n    }\n  });\n}\n\nfunction clearGameArea() {\n  const persons = document.querySelectorAll('.person');\n  persons.forEach(person => person.remove());\n}\n\nfunction buyWiderBlade() {\n  if (score >= 10) {\n    score -= 10;\n    guillotineWidth += 20;\n    document.getElementById('guillotine').style.width = `${guillotineWidth}px`;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyDoublePoints() {\n  if (score >= 20) {\n    score -= 20;\n    pointMultiplier = 2;\n    document.getElementById('score').innerText = score;\n  }\n}\n\nfunction buyHalfLoss() {\n  if (score >= 15) {\n    score -= 15;\n    lossMultiplier = 0.5;\n    document.getElementById('score').innerText = score;\n  }\n}"
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n  });\n\n  window.addEventListener('keydown', (event) => {\n    switch (event.key) {\n      case 'w':\n        camera.position.z -= moveSpeed;\n        break;\n      case 's':\n        camera.position.z += moveSpeed;\n        break;\n      case 'a':\n        camera.position.x -= moveSpeed;\n        break;\n      case 'd':\n        camera.position.x += moveSpeed;\n        break;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n      camera.rotation.y = mouseX * 0.1;\n      camera.rotation.x = mouseY * 0.1;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.2;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.05;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.05\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.05;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.05\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.05;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshPhongMaterial({ color: 0xff0000 }),\n      new THREE.MeshPhongMaterial({ color: 0x00ff00 }),\n      new THREE.MeshPhongMaterial({ color: 0x0000ff }),\n      new THREE.MeshPhongMaterial({ color: 0xffff00 }),\n      new THREE.MeshPhongMaterial({ color: 0xff00ff }),\n      new THREE.MeshPhongMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    const light = new THREE.PointLight(0xffffff, 1, 100);\n    light.position.set(10, 10, 10);\n    scene.add(light);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n        case 'c':\n          spawnCircle();\n          break;\n        case 's':\n          spawnSquare();\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  function spawnCircle() {\n    const geometry = new THREE.SphereGeometry(0.5, 32, 32);\n    const material = new THREE.MeshPhongMaterial({ color: 0xffff00 });\n    const sphere = new THREE.Mesh(geometry, material);\n    sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 2);\n    scene.add(sphere);\n  }\n\n  function spawnSquare() {\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n    const box = new THREE.Mesh(geometry, material);\n    box.position.set(camera.position.x, camera.position.y, camera.position.z - 2);\n    scene.add(box);\n  }\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const circleGeometry = new THREE.CircleGeometry(0.5, 32);\n          const circleMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n          const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n          circle.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(circle);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n          const square = new THREE.Mesh(squareGeometry, squareMaterial);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, 800 / 600, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(800, 600);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const circleGeometry = new THREE.CircleGeometry(0.5, 32);\n          const circleMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n          const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n          circle.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(circle);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n          const square = new THREE.Mesh(squareGeometry, squareMaterial);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y += mouseX * sensitivity;\n      camera.rotation.x += mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const circleGeometry = new THREE.CircleGeometry(0.5, 32);\n          const circleMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n          const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n          circle.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(circle);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n          const square = new THREE.Mesh(squareGeometry, squareMaterial);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const circleGeometry = new THREE.CircleGeometry(0.5, 32);\n          const circleMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n          const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n          circle.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(circle);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n          const square = new THREE.Mesh(squareGeometry, squareMaterial);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const circleGeometry = new THREE.CircleGeometry(0.5, 32);\n          const circleMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n          const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n          circle.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(circle);\n          break;\n        case 'x':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n          const square = new THREE.Mesh(squareGeometry, squareMaterial);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const circleGeometry = new THREE.CircleGeometry(0.5, 32);\n          const circleMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n          const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n          circle.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(circle);\n          objects.push(circle);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n          const square = new THREE.Mesh(squareGeometry, squareMaterial);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 's':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 'e':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 'e':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 'v':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          obj.rotation.x += 0.01;\n          obj.rotation.y += 0.01;\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 'v':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "WebGL Game",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Added camera functionality</li>\n      <li>Improved game mechanics</li>\n    </ul>\n    <button id=\"closeUpdateMenu\">Close</button>\n  </div>\n  <div id=\"settingsMenu\" style=\"display:none;\">\n    <p>Settings:</p>\n    <label for=\"sensitivityRange\">Sensitivity:</label>\n    <input type=\"range\" id=\"sensitivityRange\" min=\"0.01\" max=\"0.2\" step=\"0.01\" value=\"0.02\">\n    <button id=\"closeSettingsMenu\">Close</button>\n  </div>\n  <button id=\"settingsButton\">Settings</button>\n</div>\n<script type=\"module\">\n  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.136.0/build/three.module.js';\n\n  let camera, scene, renderer, cube, floor;\n  let moveSpeed = 0.1;\n  let isGameRunning = false;\n  let sensitivity = 0.02;\n  const objects = [];\n\n  function init() {\n    scene = new THREE.Scene();\n    const gameWindow = document.getElementById('gameWindow');\n    camera = new THREE.PerspectiveCamera(75, gameWindow.clientWidth / gameWindow.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(gameWindow.clientWidth, gameWindow.clientHeight);\n    document.getElementById('gameArea').appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const materials = [\n      new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n      new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n      new THREE.MeshBasicMaterial({ color: 0x00ffff })\n    ];\n    cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n    objects.push(cube);\n\n    const floorGeometry = new THREE.PlaneGeometry(100, 100);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x808080, side: THREE.DoubleSide });\n    floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    scene.add(floor);\n\n    const skyGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyMaterial = new THREE.MeshBasicMaterial({ color: 0x87CEEB, side: THREE.BackSide });\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial);\n    scene.add(sky);\n\n    function animate() {\n      if (isGameRunning) {\n        requestAnimationFrame(animate);\n        objects.forEach(obj => {\n          if (obj && obj.rotation) {\n            obj.rotation.x += 0.01;\n            obj.rotation.y += 0.01;\n          }\n        });\n        renderer.render(scene, camera);\n      }\n    }\n    animate();\n  }\n\n  document.getElementById('startButton').addEventListener('click', () => {\n    document.getElementById('score').innerText = 0;\n    isGameRunning = true;\n    document.body.requestPointerLock();\n    init();\n  });\n\n  document.getElementById('updateMenu').style.display = 'block';\n  document.getElementById('closeUpdateMenu').addEventListener('click', () => {\n    document.getElementById('updateMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('settingsButton').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'block';\n    isGameRunning = false;\n  });\n\n  document.getElementById('closeSettingsMenu').addEventListener('click', () => {\n    document.getElementById('settingsMenu').style.display = 'none';\n    isGameRunning = true;\n  });\n\n  document.getElementById('sensitivityRange').addEventListener('input', (event) => {\n    sensitivity = parseFloat(event.target.value);\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'w':\n          camera.position.z -= moveSpeed;\n          break;\n        case 's':\n          camera.position.z += moveSpeed;\n          break;\n        case 'a':\n          camera.position.x -= moveSpeed;\n          break;\n        case 'd':\n          camera.position.x += moveSpeed;\n          break;\n      }\n    }\n  });\n\n  let mouseX = 0, mouseY = 0;\n  window.addEventListener('mousemove', (event) => {\n    if (isGameRunning) {\n      mouseX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      mouseY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n      camera.rotation.y -= mouseX * sensitivity;\n      camera.rotation.x -= mouseY * sensitivity;\n    }\n  });\n\n  window.addEventListener('keydown', (event) => {\n    if (isGameRunning) {\n      switch (event.key) {\n        case 'c':\n          const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n          const sphereMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00, shininess: 100 });\n          const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n          sphere.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(sphere);\n          objects.push(sphere);\n          break;\n        case 'v':\n          const squareGeometry = new THREE.BoxGeometry();\n          const squareMaterials = [\n            new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n            new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n            new THREE.MeshBasicMaterial({ color: 0x0000ff }),\n            new THREE.MeshBasicMaterial({ color: 0xffff00 }),\n            new THREE.MeshBasicMaterial({ color: 0xff00ff }),\n            new THREE.MeshBasicMaterial({ color: 0x00ffff })\n          ];\n          const square = new THREE.Mesh(squareGeometry, squareMaterials);\n          square.position.set(camera.position.x, camera.position.y, camera.position.z - 5);\n          scene.add(square);\n          objects.push(square);\n          break;\n      }\n    }\n  });\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  cursor: none;\n}\n\n#updateMenu, #settingsMenu {\n  position: absolute;\n  top: 100px;\n  left: 10px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#settingsButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}",
    "javascript": ""
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 100%;\n  height: calc(100% - 150px);\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 150px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.addEventListener('click', function() {\n        handleBlockClick(this);\n      });\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction handleBlockClick(block) {\n  score += 10;\n  document.getElementById('score').innerText = score;\n  block.style.backgroundColor = 'red';\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 400px;\n  height: 400px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n}\n\n#piecesArea {\n  width: 300px;\n  height: 150px;\n  position: absolute;\n  top: 130px;\n  left: 420px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  width: 60px;\n  height: 60px;\n  background-color: green;\n  display: inline-block;\n  cursor: pointer;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var piece = document.createElement('div');\n    piece.dataset.index = i;\n    piece.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(piece);\n    pieces.push(generateRandomPiece());\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  for (var i = 0; i < 3; i++) {\n    var row = [];\n    for (var j = 0; j < 3; j++) {\n      row.push(Math.round(Math.random()));\n    }\n    piece.push(row);\n  }\n  return piece;\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction handleBlockClick(block) {\n  score += 10;\n  document.getElementById('score').innerText = score;\n  block.style.backgroundColor = 'red';\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  width: 80px;\n  height: 80px;\n  background-color: green;\n  display: inline-block;\n  cursor: grab;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var piece = document.createElement('div');\n    piece.dataset.index = i;\n    piece.draggable = true;\n    piece.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(piece);\n    pieces.push(generateRandomPiece());\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  for (var i = 0; i < 3; i++) {\n    var row = [];\n    for (var j = 0; j < 3; j++) {\n      row.push(Math.round(Math.random()));\n    }\n    piece.push(row);\n  }\n  return piece;\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  handleBlockClick(block, pieceIndex);\n}\n\nfunction handleBlockClick(block, pieceIndex) {\n  score += 10;\n  document.getElementById('score').innerText = score;\n  block.style.backgroundColor = 'red';\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  width: 80px;\n  height: 80px;\n  background-color: green;\n  display: inline-block;\n  cursor: grab;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var piece = document.createElement('div');\n    piece.dataset.index = i;\n    piece.draggable = true;\n    piece.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(piece);\n    pieces.push(generateRandomPiece());\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n  }\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: green;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        if (piece[row][col] === 1) {\n          var block = document.createElement('div');\n          pieceContainer.appendChild(block);\n        } else {\n          pieceContainer.appendChild(document.createElement('div'));\n        }\n      }\n    }\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n  }\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: green;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: green;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n  }\n}\n\nfunction generateRandomPiece() {\n  var piece = [];\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]] // 3x1 vertical\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    checkForFullLines();\n    generatePieces(); // Generate new pieces after placing one\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}",
    "multiplayer": ""
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  color: white;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  // Add game logic here\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  updateMenu.style.display = updateMenu.style.display === 'none' ? 'flex' : 'none';\n}\n\nfunction assignTeams() {\n  // Logic to assign players to teams and order within the team\n}\n\nfunction placeShape(player, shape, x, y) {\n  // Logic for placing a shape on the grid\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  color: white;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  // Add game logic here\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n  if (!isDisplayed) {\n    // Pause game logic\n  }\n}\n\nfunction assignTeams() {\n  // Logic to assign players to teams and order within the team\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    // Logic for placing a shape on the grid\n    currentPlayer = (currentPlayer + 1) % players.length;\n  }\n}",
    "multiplayer": "function sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n      // Update game state based on received data\n    }\n  };\n  xhr.send();\n}"
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  color: white;\n}\n\n#currentPlayer {\n  left: 200px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  // Add game logic here\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n  if (!isDisplayed) {\n    // Pause game logic\n  }\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction assignTeams() {\n  // Logic to assign players to teams and order within the team\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    // Logic for placing a shape on the grid\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n      // Update game state based on received data\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 800px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  color: white;\n}\n\n#currentPlayer {\n  left: 200px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    // Logic for placing a shape on the grid\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 600px;\n  height: 600px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n  color: white;\n}\n\n#currentPlayer {\n  left: 200px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 120px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    // Logic for placing a shape on the grid\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 400px;\n  height: 400px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 16px;\n  color: white;\n}\n\n#currentPlayer {\n  left: 150px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 100px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    // Logic for placing a shape on the grid\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 320px;\n  height: 320px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 14px;\n  color: white;\n}\n\n#currentPlayer {\n  left: 130px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 320px;\n  height: 320px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 14px;\n  color: white;\n}\n\n#currentPlayer {\n  left: 130px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 90px;\n}\n\n#gameArea {\n  width: 100%;\n  height: 100%;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n}\n\n#gameArea div {\n  background-color: white;\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 400px;\n  height: 400px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n  background-color: #f0f0f0;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 14px;\n  color: black;\n}\n\n#currentPlayer {\n  left: 130px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 90px;\n}\n\n#gameArea {\n  width: 320px;\n  height: 320px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: white;\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 400px;\n  height: 500px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n  background-color: #f0f0f0;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 14px;\n  color: black;\n}\n\n#currentPlayer {\n  left: 130px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 90px;\n}\n\n#gameArea {\n  width: 320px;\n  height: 320px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n  position: absolute;\n  bottom: 60px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: white;\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\nconst shapes = [\n  [[1, 1], [1, 1]], // 2x2\n  [[1, 1, 1], [1, 1, 1], [1, 1, 1]], // 3x3\n  [[1, 1, 1]], // 1x3\n  [[1, 1, 1, 1]], // 1x4\n  [[1, 1, 1, 1, 1]], // 1x5\n  [[1, 1, 1], [1, 1]], // L shape\n  [[1, 1, 1], [0, 1, 0]] // T shape\n];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n  provideShapes();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction provideShapes() {\n  // Logic to provide shapes to the current player\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n    provideShapes();\n  }\n}\n\nfunction sendMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      message = response.data;\n    }\n  };\n  xhr.send();\n}\n\ndocument.addEventListener('DOMContentLoaded', startGame);",
    "multiplayer": ""
  },
  {
    "title": "Multiplayer Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"currentPlayer\">Current Player: <span id=\"playerName\">Red</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <div id=\"updateContent\">\n      <p>Latest Updates:</p>\n      <ul>\n        <li>Multiplayer turn-based mode added.</li>\n        <li>Team assignments: Red, Yellow, Green, Blue.</li>\n        <li>8x8 grid for shape placement.</li>\n      </ul>\n      <button id=\"closeUpdateButton\">Close</button>\n    </div>\n  </div>\n</div>\n<script type=\"module\">\n  // Import necessary libraries here if needed\n</script>",
    "css": "#gameWindow {\n  width: 400px;\n  height: 500px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n  background-color: #f0f0f0;\n}\n\n#scoreBoard, #currentPlayer {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 14px;\n  color: black;\n}\n\n#currentPlayer {\n  left: 130px;\n}\n\n#startButton, #updateButton {\n  position: absolute;\n  top: 40px;\n  left: 10px;\n  margin-right: 10px;\n}\n\n#updateButton {\n  left: 90px;\n}\n\n#gameArea {\n  width: 320px;\n  height: 320px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 1px;\n  position: absolute;\n  bottom: 60px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: white;\n  border: 1px solid black;\n  width: 100%;\n  height: 100%;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#updateContent {\n  background-color: #333;\n  padding: 20px;\n  border-radius: 10px;\n}\n\n#closeUpdateButton {\n  margin-top: 10px;\n  background-color: #555;\n  color: white;\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n#closeUpdateButton:hover {\n  background-color: #777;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', toggleUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', toggleUpdateMenu);\n\nlet currentPlayer = 0;\nconst players = ['Red', 'Yellow', 'Green', 'Blue'];\nconst shapes = [\n  [[1, 1], [1, 1]], // 2x2\n  [[1, 1, 1], [1, 1, 1], [1, 1, 1]], // 3x3\n  [[1, 1, 1]], // 1x3\n  [[1, 1, 1, 1]], // 1x4\n  [[1, 1, 1, 1, 1]], // 1x5\n  [[1, 1, 1], [1, 1]], // L shape\n  [[1, 1, 1], [0, 1, 0]] // T shape\n];\n\nfunction startGame() {\n  document.getElementById('score').innerText = 0;\n  currentPlayer = 0;\n  updateCurrentPlayerDisplay();\n  initializeGameArea();\n  provideShapes();\n}\n\nfunction toggleUpdateMenu() {\n  const updateMenu = document.getElementById('updateMenu');\n  const isDisplayed = updateMenu.style.display === 'none';\n  updateMenu.style.display = isDisplayed ? 'flex' : 'none';\n}\n\nfunction updateCurrentPlayerDisplay() {\n  document.getElementById('playerName').innerText = players[currentPlayer];\n}\n\nfunction initializeGameArea() {\n  const gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const cell = document.createElement('div');\n      cell.style.backgroundColor = 'white';\n      cell.style.border = '1px solid black';\n      cell.style.width = '100%';\n      cell.style.height = '100%';\n      gameArea.appendChild(cell);\n    }\n  }\n}\n\nfunction provideShapes() {\n  const shapeContainer = document.createElement('div');\n  shapeContainer.style.display = 'flex';\n  shapeContainer.style.marginTop = '10px';\n  shapes.forEach((shape, index) => {\n    const shapeElement = document.createElement('div');\n    shapeElement.style.display = 'inline-block';\n    shapeElement.style.margin = '5px';\n    shapeElement.style.backgroundColor = players[currentPlayer].toLowerCase();\n    shapeElement.draggable = true;\n    shapeElement.ondragstart = function(event) {\n      event.dataTransfer.setData('text', index);\n    };\n    shapeContainer.appendChild(shapeElement);\n  });\n  document.getElementById('gameWindow').appendChild(shapeContainer);\n}\n\nfunction placeShape(player, shape, x, y) {\n  if (player === players[currentPlayer]) {\n    currentPlayer = (currentPlayer + 1) % players.length;\n    updateCurrentPlayerDisplay();\n    provideShapes();\n  }\n}\n\nfunction sendMultiplayerData(message) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/multiplayer', true);\n  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  xhr.send(JSON.stringify({ data: message }));\n}\n\nfunction receiveMultiplayerData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', '/multiplayer', true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      updateGameBoard(response.data);\n    }\n  };\n  xhr.send();\n}\n\nfunction updateGameBoard(data) {\n  // Logic to update the game board based on received data\n}\n\ndocument.addEventListener('DOMContentLoaded', startGame);",
    "multiplayer": "{\n  \"data\": \"gameState\"\n}"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], // 2x2\n    [[1, 1, 1]], // 1x3 horizontal\n    [[1], [1], [1]], // 3x1 vertical\n    [[1, 1, 1, 1]], // 1x4 horizontal\n    [[1, 1, 1, 1, 1]], // 1x5 horizontal\n    [[1, 1, 1], [0, 1, 0]], // T shape\n    [[1, 1, 1], [1, 0, 0]], // L shape\n    [[1, 1, 1], [1, 1, 1]] // 3x3\n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}",
    "multiplayer": ""
  },
  {
    "title": "Block Blast",
    "html": "",
    "css": "",
    "javascript": "",
    "multiplayer": ""
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  updateServer();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}\n\nfunction updateServer() {\n  var data = {\n    score: score,\n    grid: grid\n  };\n  $.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify(data),\n    contentType: \"application/json\",\n    success: function(response) {\n      console.log(\"Confirm and run initiated successfully:\", response);\n    },\n    error: function(error) {\n      console.error(\"Error initiating confirm and run:\", error);\n    }\n  });\n}",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n  updateServer();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}\n\nfunction updateServer() {\n  var data = {\n    score: score,\n    grid: grid\n  };\n  console.log(\"Sending data to server:\", data);\n  $.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify(data),\n    contentType: \"application/json\",\n    success: function(response) {\n      console.log(\"Confirm and run initiated successfully:\", response);\n    },\n    error: function(error) {\n      console.error(\"Error initiating confirm and run:\", error);\n    }\n  });\n}",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}\n\nfunction updateServer() {\n  var data = {\n    score: score,\n    grid: grid\n  };\n  console.log(\"Sending data to server:\", data);\n  $.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify(data),\n    contentType: \"application/json\",\n    success: function(response) {\n      console.log(\"Confirm and run initiated successfully:\", response);\n    },\n    error: function(error) {\n      console.error(\"Error initiating confirm and run:\", error);\n    }\n  });\n}",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <button id=\"startButton\">Start Game</button>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#startButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 130px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 130px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('startButton').addEventListener('click', startGame);\ndocument.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}\n\nfunction updateServer() {\n  var data = {\n    score: score,\n    grid: grid\n  };\n  console.log(\"Sending data to server:\", data);\n  $.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify(data),\n    contentType: \"application/json\",\n    success: function(response) {\n      console.log(\"Confirm and run initiated successfully:\", response);\n    },\n    error: function(error) {\n      console.error(\"Error initiating confirm and run:\", error);\n    }\n  });\n}",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}\n\nfunction updateServer() {\n  var data = {\n    score: score,\n    grid: grid\n  };\n  console.log(\"Sending data to server:\", data);\n  $.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify(data),\n    contentType: \"application/json\",\n    success: function(response) {\n      console.log(\"Confirm and run initiated successfully:\", response);\n    },\n    error: function(error) {\n      console.error(\"Error initiating confirm and run:\", error);\n    }\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  // Logic to pause the game\n}\n\nfunction resumeGame() {\n  // Logic to resume the game\n}\n\nfunction updateServer() {\n  var data = {\n    score: score,\n    grid: grid\n  };\n  console.log(\"Sending data to server:\", data);\n  $.ajax({\n    type: \"POST\",\n    url: \"/skibidi\",\n    data: JSON.stringify(data),\n    contentType: \"application/json\",\n    success: function(response) {\n      console.log(\"Confirm and run initiated successfully:\", response);\n    },\n    error: function(error) {\n      console.error(\"Error initiating confirm and run:\", error);\n    }\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n  }\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value;\n  if (username) {\n    leaderboard.push({ username: username, score: score });\n    updateLeaderboard();\n  }\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value;\n  if (username) {\n    leaderboard.push({ username: username, score: score });\n    updateLeaderboard();\n  }\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = 'red';\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? 'red' : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  },
  {
    "title": "Block Blast",
    "html": "<div id=\"gameWindow\">\n  <div id=\"scoreBoard\">Score: <span id=\"score\">0</span></div>\n  <div id=\"gameArea\"></div>\n  <div id=\"piecesArea\"></div>\n  <button id=\"updateButton\">Updates</button>\n  <div id=\"updateMenu\" style=\"display:none;\">\n    <p>Game Updates:</p>\n    <ul>\n      <li>Improved block mechanics</li>\n      <li>Added update menu</li>\n      <li>Enhanced mobile compatibility</li>\n    </ul>\n    <button id=\"closeUpdateButton\">Close</button>\n  </div>\n  <div id=\"leaderboard\" style=\"display:none;\">\n    <h3>Leaderboard</h3>\n    <ul id=\"leaderboardList\"></ul>\n    <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n    <button id=\"joinLeaderboardButton\">Join Leaderboard</button>\n  </div>\n</div>\n<script type=\"module\">\n  // Import any necessary libraries here\n</script>",
    "css": "#gameWindow {\n  width: 100%;\n  max-width: 1000px;\n  height: 700px;\n  border: 2px solid black;\n  position: relative;\n  margin: auto;\n}\n\n#scoreBoard {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  font-size: 20px;\n}\n\n#updateButton {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n}\n\n#gameArea {\n  width: 500px;\n  height: 500px;\n  background-color: lightgrey;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-rows: repeat(8, 1fr);\n  gap: 2px;\n  position: absolute;\n  top: 90px;\n  left: 10px;\n}\n\n#gameArea div {\n  background-color: blue;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  position: relative;\n}\n\n#gameArea div.hover {\n  outline: 2px dashed yellow;\n}\n\n#piecesArea {\n  width: 400px;\n  height: 200px;\n  position: absolute;\n  top: 90px;\n  left: 520px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#piecesArea div {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 2px;\n  background-color: transparent;\n  cursor: grab;\n}\n\n#piecesArea div div {\n  width: 25px;\n  height: 25px;\n  background-color: transparent;\n}\n\n#piecesArea div.dragging div {\n  width: 62.5px;\n  height: 62.5px;\n}\n\n#updateMenu {\n  position: absolute;\n  top: 300px;\n  left: 10px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboard {\n  position: absolute;\n  top: 300px;\n  left: 250px;\n  width: 200px;\n  background-color: white;\n  border: 1px solid black;\n  padding: 10px;\n  z-index: 10;\n}\n\n#leaderboardList {\n  list-style-type: none;\n  padding: 0;\n}\n\n#username {\n  width: 100%;\n  margin-top: 10px;\n}\n\n#joinLeaderboardButton {\n  margin-top: 10px;\n  width: 100%;\n}",
    "javascript": "document.getElementById('updateButton').addEventListener('click', openUpdateMenu);\ndocument.getElementById('closeUpdateButton').addEventListener('click', closeUpdateMenu);\ndocument.getElementById('joinLeaderboardButton').addEventListener('click', joinLeaderboard);\n\nvar score = 0;\nvar grid = [];\nvar pieces = [];\nvar isPaused = false;\nvar leaderboard = [];\nvar playerColor = 'red';\nvar playerColors = ['red', 'green', 'orange', 'purple', 'cyan'];\n\nfunction startGame() {\n  score = 0;\n  document.getElementById('score').innerText = score;\n  initializeGrid();\n  generatePieces();\n}\n\nfunction initializeGrid() {\n  grid = [];\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < 8; i++) {\n    var row = [];\n    for (var j = 0; j < 8; j++) {\n      row.push(0);\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n    grid.push(row);\n  }\n}\n\nfunction generatePieces() {\n  pieces = [];\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  for (var i = 0; i < 3; i++) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = i;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    pieceContainer.addEventListener('touchstart', touchStart);\n    pieceContainer.addEventListener('touchmove', touchMove);\n    pieceContainer.addEventListener('touchend', touchEnd);\n    piecesArea.appendChild(pieceContainer);\n    var piece = generateRandomPiece();\n    pieces.push(piece);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  }\n}\n\nfunction generateRandomPiece() {\n  var shapes = [\n    [[1, 1], [1, 1]], \n    [[1, 1, 1]], \n    [[1], [1], [1]], \n    [[1, 1, 1, 1]], \n    [[1, 1, 1, 1, 1]], \n    [[1, 1, 1], [0, 1, 0]], \n    [[1, 1, 1], [1, 0, 0]], \n    [[1, 1, 1], [1, 1, 1]] \n  ];\n  return shapes[Math.floor(Math.random() * shapes.length)];\n}\n\nfunction dragStart(event) {\n  event.dataTransfer.setData('text', event.target.dataset.index);\n  event.target.classList.add('dragging');\n}\n\nfunction dragEnd(event) {\n  event.target.classList.remove('dragging');\n}\n\nfunction allowDrop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  highlightPlacement(block, pieceIndex);\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  var pieceIndex = event.dataTransfer.getData('text');\n  var block = event.target;\n  placePiece(block, pieceIndex);\n}\n\nfunction placePiece(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          grid[row + i][col + j] = 1;\n          var blockToColor = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToColor.style.backgroundColor = playerColor;\n        }\n      }\n    }\n    score += 10;\n    document.getElementById('score').innerText = score;\n    pieces.splice(pieceIndex, 1);\n    updatePiecesArea();\n    checkForFullLines();\n    if (pieces.length === 0) {\n      generatePieces();\n    }\n    updateServer();\n  }\n}\n\nfunction highlightPlacement(block, pieceIndex) {\n  var row = parseInt(block.dataset.row);\n  var col = parseInt(block.dataset.col);\n  var piece = pieces[pieceIndex];\n\n  if (canPlacePiece(row, col, piece)) {\n    for (var i = 0; i < piece.length; i++) {\n      for (var j = 0; j < piece[i].length; j++) {\n        if (piece[i][j] === 1) {\n          var blockToHighlight = document.querySelector('[data-row=\"' + (row + i) + '\"][data-col=\"' + (col + j) + '\"]');\n          blockToHighlight.classList.add('hover');\n        }\n      }\n    }\n  }\n}\n\nfunction removeHoverEffect(event) {\n  var blocks = document.querySelectorAll('#gameArea div');\n  blocks.forEach(function(block) {\n    block.classList.remove('hover');\n  });\n}\n\nfunction canPlacePiece(row, col, piece) {\n  for (var i = 0; i < piece.length; i++) {\n    for (var j = 0; j < piece[i].length; j++) {\n      if (piece[i][j] === 1) {\n        if (row + i >= 8 || col + j >= 8 || grid[row + i][col + j] === 1) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction checkForFullLines() {\n  for (var i = 0; i < 8; i++) {\n    if (grid[i].every(val => val === 1)) {\n      clearLine(i, 'row');\n    }\n    if (grid.map(row => row[i]).every(val => val === 1)) {\n      clearLine(i, 'col');\n    }\n  }\n}\n\nfunction clearLine(index, type) {\n  if (type === 'row') {\n    for (var j = 0; j < 8; j++) {\n      grid[index][j] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + index + '\"][data-col=\"' + j + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  } else if (type === 'col') {\n    for (var i = 0; i < 8; i++) {\n      grid[i][index] = 0;\n      var blockToClear = document.querySelector('[data-row=\"' + i + '\"][data-col=\"' + index + '\"]');\n      blockToClear.style.backgroundColor = 'blue';\n    }\n  }\n  score += 50;\n  document.getElementById('score').innerText = score;\n  updateServer();\n}\n\nfunction updatePiecesArea() {\n  var piecesArea = document.getElementById('piecesArea');\n  piecesArea.innerHTML = '';\n  pieces.forEach(function(piece, index) {\n    var pieceContainer = document.createElement('div');\n    pieceContainer.dataset.index = index;\n    pieceContainer.draggable = true;\n    pieceContainer.addEventListener('dragstart', dragStart);\n    pieceContainer.addEventListener('dragend', dragEnd);\n    piecesArea.appendChild(pieceContainer);\n    for (var row = 0; row < piece.length; row++) {\n      for (var col = 0; col < piece[row].length; col++) {\n        var block = document.createElement('div');\n        if (piece[row][col] === 1) {\n          block.style.backgroundColor = 'green';\n        }\n        pieceContainer.appendChild(block);\n      }\n    }\n    pieceContainer.style.gridTemplateColumns = 'repeat(' + piece[0].length + ', 1fr)';\n    pieceContainer.style.gridTemplateRows = 'repeat(' + piece.length + ', 1fr)';\n  });\n}\n\nfunction openUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'block';\n  pauseGame();\n}\n\nfunction closeUpdateMenu() {\n  document.getElementById('updateMenu').style.display = 'none';\n  resumeGame();\n}\n\nfunction pauseGame() {\n  isPaused = true;\n}\n\nfunction resumeGame() {\n  isPaused = false;\n}\n\nfunction updateServer() {\n  if (!isPaused) {\n    var data = {\n      score: score,\n      grid: grid,\n      playerColor: playerColor\n    };\n    $.ajax({\n      type: \"POST\",\n      url: \"/skibidi\",\n      data: JSON.stringify(data),\n      contentType: \"application/json\",\n      success: function(response) {\n        console.log(\"Confirm and run initiated successfully:\", response);\n      },\n      error: function(error) {\n        console.error(\"Error initiating confirm and run:\", error);\n      }\n    });\n  }\n}\n\nfunction joinLeaderboard() {\n  var username = document.getElementById('username').value || 'Client';\n  leaderboard.push({ username: username, score: score });\n  updateLeaderboard();\n}\n\nfunction updateLeaderboard() {\n  var leaderboardList = document.getElementById('leaderboardList');\n  leaderboardList.innerHTML = '';\n  leaderboard.sort(function(a, b) { return b.score - a.score; });\n  leaderboard.forEach(function(player) {\n    var listItem = document.createElement('li');\n    listItem.textContent = player.username + ': ' + player.score;\n    leaderboardList.appendChild(listItem);\n  });\n}\n\nfunction touchStart(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.index !== undefined) {\n    target.classList.add('dragging');\n    event.dataTransfer = { setData: function(type, val) { this[type] = val; } };\n    event.dataTransfer.setData('text', target.dataset.index);\n  }\n}\n\nfunction touchMove(event) {\n  event.preventDefault();\n  var touch = event.touches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    allowDrop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n}\n\nfunction touchEnd(event) {\n  event.preventDefault();\n  var touch = event.changedTouches[0];\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  if (target && target.dataset.row !== undefined) {\n    drop({ preventDefault: function() {}, dataTransfer: event.dataTransfer, target: target });\n  }\n  var pieces = document.querySelectorAll('#piecesArea div');\n  pieces.forEach(function(piece) {\n    piece.classList.remove('dragging');\n  });\n}\n\nstartGame();",
    "multiplayer": "function handleIncomingData(message) {\n  score = message.score;\n  grid = message.grid;\n  playerColor = message.playerColor;\n  document.getElementById('score').innerText = score;\n  var gameArea = document.getElementById('gameArea');\n  gameArea.innerHTML = '';\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      var block = document.createElement('div');\n      block.dataset.row = i;\n      block.dataset.col = j;\n      block.style.backgroundColor = grid[i][j] === 1 ? playerColor : 'blue';\n      block.addEventListener('dragover', allowDrop);\n      block.addEventListener('drop', drop);\n      block.addEventListener('dragleave', removeHoverEffect);\n      block.addEventListener('touchstart', touchStart);\n      block.addEventListener('touchmove', touchMove);\n      block.addEventListener('touchend', touchEnd);\n      gameArea.appendChild(block);\n    }\n  }\n  updateLeaderboard();\n}\n\nhandleIncomingData(message);"
  }
]  